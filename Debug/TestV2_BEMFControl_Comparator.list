
TestV2_BEMFControl_Comparator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b98  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d70  08004d70  00014d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004db0  08004db0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004db0  08004db0  00014db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db8  08004db8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000018  08004dd8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08004dd8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c56  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000225e  00000000  00000000  00032c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  00034f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  00035f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258a5  00000000  00000000  00036f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125c2  00000000  00000000  0005c7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7f2a  00000000  00000000  0006edbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166ce9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  00166d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004d58 	.word	0x08004d58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08004d58 	.word	0x08004d58

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 feb1 	bl	8001286 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f82c 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f988 	bl	800083c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052c:	f000 f874 	bl	8000618 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000530:	f000 f8bc 	bl	80006ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_DisableIRQ((EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn));
 8000534:	200f      	movs	r0, #15
 8000536:	f001 f860 	bl	80015fa <HAL_NVIC_DisableIRQ>

  HAL_TIM_Base_Start(&htim1);
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <main+0x58>)
 800053c:	f002 fb9a 	bl	8002c74 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000540:	2100      	movs	r1, #0
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <main+0x58>)
 8000544:	f002 fc68 	bl	8002e18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000548:	2104      	movs	r1, #4
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x58>)
 800054c:	f002 fc64 	bl	8002e18 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000550:	2108      	movs	r1, #8
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x58>)
 8000554:	f002 fc60 	bl	8002e18 <HAL_TIM_PWM_Start>

  //init delay system
  HAL_Delay(2000);
 8000558:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800055c:	f000 ff04 	bl	8001368 <HAL_Delay>

  duty = PWM_start;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <main+0x5c>)
 8000562:	881a      	ldrh	r2, [r3, #0]
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <main+0x60>)
 8000566:	801a      	strh	r2, [r3, #0]
  BLDC_startBEMF();
 8000568:	f000 fc58 	bl	8000e1c <BLDC_startBEMF>

  HAL_NVIC_EnableIRQ((EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn));
 800056c:	200f      	movs	r0, #15
 800056e:	f001 f836 	bl	80015de <HAL_NVIC_EnableIRQ>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x56>
 8000574:	200000c8 	.word	0x200000c8
 8000578:	20000004 	.word	0x20000004
 800057c:	20000006 	.word	0x20000006

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 fbda 	bl	8004d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f001 fade 	bl	8001b64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005c2:	2355      	movs	r3, #85	; 0x55
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fb78 	bl	8001ccc <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005e2:	f000 fcf3 	bl	8000fcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fe76 	bl	80022f0 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800060a:	f000 fcdf 	bl	8000fcc <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <MX_LPUART1_UART_Init+0x90>)
 8000620:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000622:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b1b      	ldr	r3, [pc, #108]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000650:	2200      	movs	r2, #0
 8000652:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000656:	2200      	movs	r2, #0
 8000658:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800065a:	4812      	ldr	r0, [pc, #72]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800065c:	f003 fce2 	bl	8004024 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000666:	f000 fcb1 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066a:	2100      	movs	r1, #0
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	f004 fa7d 	bl	8004b6c <HAL_UARTEx_SetTxFifoThreshold>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000678:	f000 fca8 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800067c:	2100      	movs	r1, #0
 800067e:	4809      	ldr	r0, [pc, #36]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	f004 fab2 	bl	8004be8 <HAL_UARTEx_SetRxFifoThreshold>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800068a:	f000 fc9f 	bl	8000fcc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_LPUART1_UART_Init+0x8c>)
 8000690:	f004 fa33 	bl	8004afa <HAL_UARTEx_DisableFifoMode>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800069a:	f000 fc97 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000034 	.word	0x20000034
 80006a8:	40008000 	.word	0x40008000

080006ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09c      	sub	sp, #112	; 0x70
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
 80006dc:	615a      	str	r2, [r3, #20]
 80006de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2234      	movs	r2, #52	; 0x34
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fb2e 	bl	8004d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ec:	4b51      	ldr	r3, [pc, #324]	; (8000834 <MX_TIM1_Init+0x188>)
 80006ee:	4a52      	ldr	r2, [pc, #328]	; (8000838 <MX_TIM1_Init+0x18c>)
 80006f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80006f2:	4b50      	ldr	r3, [pc, #320]	; (8000834 <MX_TIM1_Init+0x188>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f8:	4b4e      	ldr	r3, [pc, #312]	; (8000834 <MX_TIM1_Init+0x188>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <MX_TIM1_Init+0x188>)
 8000700:	f242 7210 	movw	r2, #10000	; 0x2710
 8000704:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b4b      	ldr	r3, [pc, #300]	; (8000834 <MX_TIM1_Init+0x188>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <MX_TIM1_Init+0x188>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000712:	4b48      	ldr	r3, [pc, #288]	; (8000834 <MX_TIM1_Init+0x188>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000718:	4846      	ldr	r0, [pc, #280]	; (8000834 <MX_TIM1_Init+0x188>)
 800071a:	f002 fa53 	bl	8002bc4 <HAL_TIM_Base_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 fc52 	bl	8000fcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000732:	4619      	mov	r1, r3
 8000734:	483f      	ldr	r0, [pc, #252]	; (8000834 <MX_TIM1_Init+0x188>)
 8000736:	f002 fd95 	bl	8003264 <HAL_TIM_ConfigClockSource>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000740:	f000 fc44 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000744:	483b      	ldr	r0, [pc, #236]	; (8000834 <MX_TIM1_Init+0x188>)
 8000746:	f002 fb05 	bl	8002d54 <HAL_TIM_PWM_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000750:	f000 fc3c 	bl	8000fcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000754:	2300      	movs	r3, #0
 8000756:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000760:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000764:	4619      	mov	r1, r3
 8000766:	4833      	ldr	r0, [pc, #204]	; (8000834 <MX_TIM1_Init+0x188>)
 8000768:	f003 fb32 	bl	8003dd0 <HAL_TIMEx_MasterConfigSynchronization>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000772:	f000 fc2b 	bl	8000fcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	2300      	movs	r3, #0
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000782:	2300      	movs	r3, #0
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	2300      	movs	r3, #0
 8000788:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800078e:	2300      	movs	r3, #0
 8000790:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000792:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	4826      	ldr	r0, [pc, #152]	; (8000834 <MX_TIM1_Init+0x188>)
 800079c:	f002 fc4e 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007a6:	f000 fc11 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ae:	2204      	movs	r2, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4820      	ldr	r0, [pc, #128]	; (8000834 <MX_TIM1_Init+0x188>)
 80007b4:	f002 fc42 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007be:	f000 fc05 	bl	8000fcc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c6:	2208      	movs	r2, #8
 80007c8:	4619      	mov	r1, r3
 80007ca:	481a      	ldr	r0, [pc, #104]	; (8000834 <MX_TIM1_Init+0x188>)
 80007cc:	f002 fc36 	bl	800303c <HAL_TIM_PWM_ConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007d6:	f000 fbf9 	bl	8000fcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800080a:	2300      	movs	r3, #0
 800080c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_TIM1_Init+0x188>)
 8000818:	f003 fb70 	bl	8003efc <HAL_TIMEx_ConfigBreakDeadTime>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000822:	f000 fbd3 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <MX_TIM1_Init+0x188>)
 8000828:	f000 fc72 	bl	8001110 <HAL_TIM_MspPostInit>

}
 800082c:	bf00      	nop
 800082e:	3770      	adds	r7, #112	; 0x70
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000c8 	.word	0x200000c8
 8000838:	40012c00 	.word	0x40012c00

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	; 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b46      	ldr	r3, [pc, #280]	; (800096c <MX_GPIO_Init+0x130>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a45      	ldr	r2, [pc, #276]	; (800096c <MX_GPIO_Init+0x130>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b43      	ldr	r3, [pc, #268]	; (800096c <MX_GPIO_Init+0x130>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	4b40      	ldr	r3, [pc, #256]	; (800096c <MX_GPIO_Init+0x130>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a3f      	ldr	r2, [pc, #252]	; (800096c <MX_GPIO_Init+0x130>)
 8000870:	f043 0320 	orr.w	r3, r3, #32
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b3d      	ldr	r3, [pc, #244]	; (800096c <MX_GPIO_Init+0x130>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0320 	and.w	r3, r3, #32
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <MX_GPIO_Init+0x130>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a39      	ldr	r2, [pc, #228]	; (800096c <MX_GPIO_Init+0x130>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b37      	ldr	r3, [pc, #220]	; (800096c <MX_GPIO_Init+0x130>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089a:	4b34      	ldr	r3, [pc, #208]	; (800096c <MX_GPIO_Init+0x130>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	4a33      	ldr	r2, [pc, #204]	; (800096c <MX_GPIO_Init+0x130>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_GPIO_Init+0x130>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2120      	movs	r1, #32
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ba:	f001 f923 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LA_Pin|LB_Pin|LC_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80008c4:	482a      	ldr	r0, [pc, #168]	; (8000970 <MX_GPIO_Init+0x134>)
 80008c6:	f001 f91d 	bl	8001b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin Comp1_Pin Comp2_Pin Comp3_Pin */
  GPIO_InitStruct.Pin = B1_Pin|Comp1_Pin|Comp2_Pin|Comp3_Pin;
 80008ca:	f242 0307 	movw	r3, #8199	; 0x2007
 80008ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_GPIO_Init+0x134>)
 80008e2:	f000 ff75 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e6:	2320      	movs	r3, #32
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 ff66 	bl	80017d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LA_Pin LB_Pin LC_Pin */
  GPIO_InitStruct.Pin = LA_Pin|LB_Pin|LC_Pin;
 8000904:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2302      	movs	r3, #2
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_GPIO_Init+0x134>)
 800091e:	f000 ff57 	bl	80017d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2006      	movs	r0, #6
 8000928:	f000 fe3f 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800092c:	2006      	movs	r0, #6
 800092e:	f000 fe56 	bl	80015de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2007      	movs	r0, #7
 8000938:	f000 fe37 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800093c:	2007      	movs	r0, #7
 800093e:	f000 fe4e 	bl	80015de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2008      	movs	r0, #8
 8000948:	f000 fe2f 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800094c:	2008      	movs	r0, #8
 800094e:	f000 fe46 	bl	80015de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2028      	movs	r0, #40	; 0x28
 8000958:	f000 fe27 	bl	80015aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095c:	2028      	movs	r0, #40	; 0x28
 800095e:	f000 fe3e 	bl	80015de <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3728      	adds	r7, #40	; 0x28
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000
 8000970:	48000800 	.word	0x48000800

08000974 <BLDC_state>:

/* USER CODE BEGIN 4 */

void BLDC_state(){
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
	switch(BLDCstep){
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <BLDC_state+0x6c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b05      	cmp	r3, #5
 800097e:	d82d      	bhi.n	80009dc <BLDC_state+0x68>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <BLDC_state+0x14>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	080009a1 	.word	0x080009a1
 800098c:	080009ab 	.word	0x080009ab
 8000990:	080009b5 	.word	0x080009b5
 8000994:	080009bf 	.word	0x080009bf
 8000998:	080009c9 	.word	0x080009c9
 800099c:	080009d3 	.word	0x080009d3
	case 0:
		AH_BL();
 80009a0:	f000 f820 	bl	80009e4 <AH_BL>
		C_Rising();
 80009a4:	f000 f9e2 	bl	8000d6c <C_Rising>
		break;
 80009a8:	e018      	b.n	80009dc <BLDC_state+0x68>
	case 1:
		AH_CL();
 80009aa:	f000 f855 	bl	8000a58 <AH_CL>
		B_Falling();
 80009ae:	f000 f9c3 	bl	8000d38 <B_Falling>
		break;
 80009b2:	e013      	b.n	80009dc <BLDC_state+0x68>
	case 2:
		BH_CL();
 80009b4:	f000 f88a 	bl	8000acc <BH_CL>
		A_Rising();
 80009b8:	f000 f970 	bl	8000c9c <A_Rising>
		break;
 80009bc:	e00e      	b.n	80009dc <BLDC_state+0x68>
	case 3:
		BH_AL();
 80009be:	f000 f8bf 	bl	8000b40 <BH_AL>
		C_Falling();
 80009c2:	f000 f9ed 	bl	8000da0 <C_Falling>
		break;
 80009c6:	e009      	b.n	80009dc <BLDC_state+0x68>
	case 4:
		CH_AL();
 80009c8:	f000 f8f4 	bl	8000bb4 <CH_AL>
		B_Rising();
 80009cc:	f000 f99a 	bl	8000d04 <B_Rising>
		break;
 80009d0:	e004      	b.n	80009dc <BLDC_state+0x68>
	case 5:
		CH_BL();
 80009d2:	f000 f929 	bl	8000c28 <CH_BL>
		A_Falling();
 80009d6:	f000 f97b 	bl	8000cd0 <A_Falling>
		break;
 80009da:	bf00      	nop
	}
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000012c 	.word	0x2000012c

080009e4 <AH_BL>:

void AH_BL(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <AH_BL+0x68>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2200      	movs	r2, #0
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 80009f0:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <AH_BL+0x68>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2200      	movs	r2, #0
 80009f6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <AH_BL+0x68>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	63da      	str	r2, [r3, #60]	; 0x3c

	//AL BH(PWM) CH(PWM) CL OFF
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	4812      	ldr	r0, [pc, #72]	; (8000a50 <AH_BL+0x6c>)
 8000a06:	f001 f87d 	bl	8001b04 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <AH_BL+0x68>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <AH_BL+0x68>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2200      	movs	r2, #0
 8000a18:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <AH_BL+0x6c>)
 8000a22:	f001 f86f 	bl	8001b04 <HAL_GPIO_WritePin>

	//AH(PWM) BL ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_setLimit(duty));
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <AH_BL+0x70>)
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f9d2 	bl	8000dd4 <PWM_setLimit>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <AH_BL+0x68>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a40:	4803      	ldr	r0, [pc, #12]	; (8000a50 <AH_BL+0x6c>)
 8000a42:	f001 f85f 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200000c8 	.word	0x200000c8
 8000a50:	48000800 	.word	0x48000800
 8000a54:	20000006 	.word	0x20000006

08000a58 <AH_CL>:
void AH_CL(){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <AH_CL+0x68>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2200      	movs	r2, #0
 8000a62:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000a64:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <AH_CL+0x68>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2200      	movs	r2, #0
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <AH_CL+0x68>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2200      	movs	r2, #0
 8000a72:	63da      	str	r2, [r3, #60]	; 0x3c

	//AL BH(PWM) BL CH(PWM) OFF
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <AH_CL+0x6c>)
 8000a7a:	f001 f843 	bl	8001b04 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <AH_CL+0x68>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2200      	movs	r2, #0
 8000a84:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <AH_CL+0x6c>)
 8000a8e:	f001 f839 	bl	8001b04 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <AH_CL+0x68>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2200      	movs	r2, #0
 8000a98:	63da      	str	r2, [r3, #60]	; 0x3c

	//AH(PWM) CL ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM_setLimit(duty));
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <AH_CL+0x70>)
 8000a9c:	881b      	ldrh	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f998 	bl	8000dd4 <PWM_setLimit>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <AH_CL+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
 8000aae:	2201      	movs	r2, #1
 8000ab0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab4:	4803      	ldr	r0, [pc, #12]	; (8000ac4 <AH_CL+0x6c>)
 8000ab6:	f001 f825 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200000c8 	.word	0x200000c8
 8000ac4:	48000800 	.word	0x48000800
 8000ac8:	20000006 	.word	0x20000006

08000acc <BH_CL>:
void BH_CL(){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <BH_CL+0x68>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <BH_CL+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2200      	movs	r2, #0
 8000ade:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000ae0:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <BH_CL+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c

	//AH(PWM) AL BL CH(PWM) OFF
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <BH_CL+0x68>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2200      	movs	r2, #0
 8000aee:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	4810      	ldr	r0, [pc, #64]	; (8000b38 <BH_CL+0x6c>)
 8000af6:	f001 f805 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <BH_CL+0x6c>)
 8000b02:	f000 ffff 	bl	8001b04 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <BH_CL+0x68>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	63da      	str	r2, [r3, #60]	; 0x3c

	//BH(PWM) CL ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_setLimit(duty));
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <BH_CL+0x70>)
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 f95e 	bl	8000dd4 <PWM_setLimit>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <BH_CL+0x68>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, SET);
 8000b22:	2201      	movs	r2, #1
 8000b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <BH_CL+0x6c>)
 8000b2a:	f000 ffeb 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200000c8 	.word	0x200000c8
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	20000006 	.word	0x20000006

08000b40 <BH_AL>:
void BH_AL(){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <BH_AL+0x68>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <BH_AL+0x68>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <BH_AL+0x68>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	; 0x3c

	//AH(PWM) BL CH(PWM) CL OFF
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <BH_AL+0x68>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	4810      	ldr	r0, [pc, #64]	; (8000bac <BH_AL+0x6c>)
 8000b6c:	f000 ffca 	bl	8001b04 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000b70:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <BH_AL+0x68>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2200      	movs	r2, #0
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7e:	480b      	ldr	r0, [pc, #44]	; (8000bac <BH_AL+0x6c>)
 8000b80:	f000 ffc0 	bl	8001b04 <HAL_GPIO_WritePin>

	//BH(PWM) AL ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, PWM_setLimit(duty));
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <BH_AL+0x70>)
 8000b86:	881b      	ldrh	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f923 	bl	8000dd4 <PWM_setLimit>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	461a      	mov	r2, r3
 8000b92:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <BH_AL+0x68>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <BH_AL+0x6c>)
 8000b9e:	f000 ffb1 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200000c8 	.word	0x200000c8
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	20000006 	.word	0x20000006

08000bb4 <CH_AL>:
void CH_AL(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <CH_AL+0x68>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <CH_AL+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <CH_AL+0x68>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	63da      	str	r2, [r3, #60]	; 0x3c

	//AH(PWM) BH(PWM) BL CL OFF
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <CH_AL+0x68>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <CH_AL+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be6:	480e      	ldr	r0, [pc, #56]	; (8000c20 <CH_AL+0x6c>)
 8000be8:	f000 ff8c 	bl	8001b04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf2:	480b      	ldr	r0, [pc, #44]	; (8000c20 <CH_AL+0x6c>)
 8000bf4:	f000 ff86 	bl	8001b04 <HAL_GPIO_WritePin>

	//CH(PWM) AL ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_setLimit(duty));
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <CH_AL+0x70>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f8e9 	bl	8000dd4 <PWM_setLimit>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <CH_AL+0x68>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2180      	movs	r1, #128	; 0x80
 8000c10:	4803      	ldr	r0, [pc, #12]	; (8000c20 <CH_AL+0x6c>)
 8000c12:	f000 ff77 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000c8 	.word	0x200000c8
 8000c20:	48000800 	.word	0x48000800
 8000c24:	20000006 	.word	0x20000006

08000c28 <CH_BL>:
void CH_BL(){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <CH_BL+0x68>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000c34:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <CH_BL+0x68>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000c3c:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <CH_BL+0x68>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c

	//AH(PWM) AL BH(PWM) CL OFF
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <CH_BL+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2180      	movs	r1, #128	; 0x80
 8000c50:	4810      	ldr	r0, [pc, #64]	; (8000c94 <CH_BL+0x6c>)
 8000c52:	f000 ff57 	bl	8001b04 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <CH_BL+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c64:	480b      	ldr	r0, [pc, #44]	; (8000c94 <CH_BL+0x6c>)
 8000c66:	f000 ff4d 	bl	8001b04 <HAL_GPIO_WritePin>

	//CH(PWM) BL ON
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, PWM_setLimit(duty));
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <CH_BL+0x70>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f8b0 	bl	8000dd4 <PWM_setLimit>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <CH_BL+0x68>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <CH_BL+0x6c>)
 8000c86:	f000 ff3d 	bl	8001b04 <HAL_GPIO_WritePin>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000c8 	.word	0x200000c8
 8000c94:	48000800 	.word	0x48000800
 8000c98:	20000006 	.word	0x20000006

08000c9c <A_Rising>:

void A_Rising(){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn);
 8000ca0:	200f      	movs	r0, #15
 8000ca2:	f000 fcaa 	bl	80015fa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ca6:	2006      	movs	r0, #6
 8000ca8:	f000 fc99 	bl	80015de <HAL_NVIC_EnableIRQ>

	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_RISING;
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <A_Rising+0x28>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
 8000cb2:	4904      	ldr	r1, [pc, #16]	; (8000cc4 <A_Rising+0x28>)
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <A_Rising+0x2c>)
 8000cb6:	f000 fcbb 	bl	8001630 <HAL_EXTI_SetConfigLine>

	INT = 1;
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <A_Rising+0x30>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2000011c 	.word	0x2000011c
 8000cc8:	20000114 	.word	0x20000114
 8000ccc:	2000012d 	.word	0x2000012d

08000cd0 <A_Falling>:

void A_Falling(){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn);
 8000cd4:	200f      	movs	r0, #15
 8000cd6:	f000 fc90 	bl	80015fa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cda:	2006      	movs	r0, #6
 8000cdc:	f000 fc7f 	bl	80015de <HAL_NVIC_EnableIRQ>

	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_FALLING;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <A_Falling+0x28>)
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
 8000ce6:	4904      	ldr	r1, [pc, #16]	; (8000cf8 <A_Falling+0x28>)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <A_Falling+0x2c>)
 8000cea:	f000 fca1 	bl	8001630 <HAL_EXTI_SetConfigLine>

	INT = 1;
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <A_Falling+0x30>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000011c 	.word	0x2000011c
 8000cfc:	20000114 	.word	0x20000114
 8000d00:	2000012d 	.word	0x2000012d

08000d04 <B_Rising>:

void B_Rising(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn);
 8000d08:	200f      	movs	r0, #15
 8000d0a:	f000 fc76 	bl	80015fa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d0e:	2007      	movs	r0, #7
 8000d10:	f000 fc65 	bl	80015de <HAL_NVIC_EnableIRQ>

	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_RISING;
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <B_Rising+0x28>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
 8000d1a:	4904      	ldr	r1, [pc, #16]	; (8000d2c <B_Rising+0x28>)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <B_Rising+0x2c>)
 8000d1e:	f000 fc87 	bl	8001630 <HAL_EXTI_SetConfigLine>

	INT = 2;
 8000d22:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <B_Rising+0x30>)
 8000d24:	2202      	movs	r2, #2
 8000d26:	701a      	strb	r2, [r3, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	2000011c 	.word	0x2000011c
 8000d30:	20000114 	.word	0x20000114
 8000d34:	2000012d 	.word	0x2000012d

08000d38 <B_Falling>:

void B_Falling(){
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn);
 8000d3c:	200f      	movs	r0, #15
 8000d3e:	f000 fc5c 	bl	80015fa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d42:	2007      	movs	r0, #7
 8000d44:	f000 fc4b 	bl	80015de <HAL_NVIC_EnableIRQ>

	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_FALLING;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <B_Falling+0x28>)
 8000d4a:	2202      	movs	r2, #2
 8000d4c:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
 8000d4e:	4904      	ldr	r1, [pc, #16]	; (8000d60 <B_Falling+0x28>)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <B_Falling+0x2c>)
 8000d52:	f000 fc6d 	bl	8001630 <HAL_EXTI_SetConfigLine>

	INT = 2;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <B_Falling+0x30>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	701a      	strb	r2, [r3, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	2000011c 	.word	0x2000011c
 8000d64:	20000114 	.word	0x20000114
 8000d68:	2000012d 	.word	0x2000012d

08000d6c <C_Rising>:

void C_Rising(){
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn);
 8000d70:	200f      	movs	r0, #15
 8000d72:	f000 fc42 	bl	80015fa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d76:	2008      	movs	r0, #8
 8000d78:	f000 fc31 	bl	80015de <HAL_NVIC_EnableIRQ>

	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_RISING;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <C_Rising+0x28>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
 8000d82:	4904      	ldr	r1, [pc, #16]	; (8000d94 <C_Rising+0x28>)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <C_Rising+0x2c>)
 8000d86:	f000 fc53 	bl	8001630 <HAL_EXTI_SetConfigLine>

	INT = 3;
 8000d8a:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <C_Rising+0x30>)
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	701a      	strb	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000011c 	.word	0x2000011c
 8000d98:	20000114 	.word	0x20000114
 8000d9c:	2000012d 	.word	0x2000012d

08000da0 <C_Falling>:

void C_Falling(){
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn | EXTI1_IRQn | EXTI2_IRQn);
 8000da4:	200f      	movs	r0, #15
 8000da6:	f000 fc28 	bl	80015fa <HAL_NVIC_DisableIRQ>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000daa:	2008      	movs	r0, #8
 8000dac:	f000 fc17 	bl	80015de <HAL_NVIC_EnableIRQ>

	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_FALLING;
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <C_Falling+0x28>)
 8000db2:	2202      	movs	r2, #2
 8000db4:	609a      	str	r2, [r3, #8]
	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
 8000db6:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <C_Falling+0x28>)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <C_Falling+0x2c>)
 8000dba:	f000 fc39 	bl	8001630 <HAL_EXTI_SetConfigLine>

	INT = 3;
 8000dbe:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <C_Falling+0x30>)
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	701a      	strb	r2, [r3, #0]
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2000011c 	.word	0x2000011c
 8000dcc:	20000114 	.word	0x20000114
 8000dd0:	2000012d 	.word	0x2000012d

08000dd4 <PWM_setLimit>:
//
//	sEXTIConfigTypeDef.Trigger = EXTI_TRIGGER_FALLING;
//	HAL_EXTI_SetConfigLine(&hexti0, &sEXTIConfigTypeDef);
//}

uint16_t PWM_setLimit(uint16_t duty){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
	if(duty < PWM_min) return duty = PWM_min;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <PWM_setLimit+0x40>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	88fa      	ldrh	r2, [r7, #6]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d204      	bcs.n	8000df2 <PWM_setLimit+0x1e>
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <PWM_setLimit+0x40>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	e00a      	b.n	8000e08 <PWM_setLimit+0x34>
	else if(duty > PWM_max) return duty = PWM_max;
 8000df2:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <PWM_setLimit+0x44>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d904      	bls.n	8000e06 <PWM_setLimit+0x32>
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <PWM_setLimit+0x44>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	80fb      	strh	r3, [r7, #6]
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	e000      	b.n	8000e08 <PWM_setLimit+0x34>
	else return duty;
 8000e06:	88fb      	ldrh	r3, [r7, #6]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	20000002 	.word	0x20000002
 8000e18:	20000000 	.word	0x20000000

08000e1c <BLDC_startBEMF>:

void BLDC_startBEMF(){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	static uint32_t i = 20000;
	while(i > 100){
 8000e20:	e023      	b.n	8000e6a <BLDC_startBEMF+0x4e>
		HAL_Delay((i/10000));
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <BLDC_startBEMF+0x5c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a15      	ldr	r2, [pc, #84]	; (8000e7c <BLDC_startBEMF+0x60>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	0b5b      	lsrs	r3, r3, #13
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fa9a 	bl	8001368 <HAL_Delay>
		BLDC_state();
 8000e34:	f7ff fd9e 	bl	8000974 <BLDC_state>
		BLDCstep++;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <BLDC_startBEMF+0x64>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <BLDC_startBEMF+0x64>)
 8000e42:	701a      	strb	r2, [r3, #0]
		BLDCstep %= 6;
 8000e44:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <BLDC_startBEMF+0x64>)
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <BLDC_startBEMF+0x68>)
 8000e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e4e:	0899      	lsrs	r1, r3, #2
 8000e50:	460b      	mov	r3, r1
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	440b      	add	r3, r1
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <BLDC_startBEMF+0x64>)
 8000e5e:	701a      	strb	r2, [r3, #0]
		i = i - 200;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <BLDC_startBEMF+0x5c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3bc8      	subs	r3, #200	; 0xc8
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <BLDC_startBEMF+0x5c>)
 8000e68:	6013      	str	r3, [r2, #0]
	while(i > 100){
 8000e6a:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <BLDC_startBEMF+0x5c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2b64      	cmp	r3, #100	; 0x64
 8000e70:	d8d7      	bhi.n	8000e22 <BLDC_startBEMF+0x6>
	}
}
 8000e72:	bf00      	nop
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	d1b71759 	.word	0xd1b71759
 8000e80:	2000012c 	.word	0x2000012c
 8000e84:	aaaaaaab 	.word	0xaaaaaaab

08000e88 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	80fb      	strh	r3, [r7, #6]
	if(INT == 1){
 8000e92:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x134>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d124      	bne.n	8000ee4 <HAL_GPIO_EXTI_Callback+0x5c>
		for (uint8_t i = 0; i < 150 ; i++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e01d      	b.n	8000edc <HAL_GPIO_EXTI_Callback+0x54>
			if(BLDCstep & 1){
 8000ea0:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00a      	beq.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x3a>
				if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0))){
 8000eac:	2101      	movs	r1, #1
 8000eae:	4845      	ldr	r0, [pc, #276]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000eb0:	f000 fe10 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10d      	bne.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x4e>
					i -= 1;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e009      	b.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x4e>
				}
			}
			else{
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0)){
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	483f      	ldr	r0, [pc, #252]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000ec6:	f000 fe05 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <HAL_GPIO_EXTI_Callback+0x4e>
					i -= 1;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
		for (uint8_t i = 0; i < 150 ; i++){
 8000ed6:	7bfb      	ldrb	r3, [r7, #15]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
 8000ede:	2b95      	cmp	r3, #149	; 0x95
 8000ee0:	d9de      	bls.n	8000ea0 <HAL_GPIO_EXTI_Callback+0x18>
 8000ee2:	e050      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0xfe>
				}
			}
		}
	}

	else if(INT == 2){
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x134>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d124      	bne.n	8000f36 <HAL_GPIO_EXTI_Callback+0xae>
		for (uint8_t i = 0; i < 150 ; i++){
 8000eec:	2300      	movs	r3, #0
 8000eee:	73bb      	strb	r3, [r7, #14]
 8000ef0:	e01d      	b.n	8000f2e <HAL_GPIO_EXTI_Callback+0xa6>
			if(BLDCstep & 1){
 8000ef2:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00a      	beq.n	8000f14 <HAL_GPIO_EXTI_Callback+0x8c>
				if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1))){
 8000efe:	2102      	movs	r1, #2
 8000f00:	4830      	ldr	r0, [pc, #192]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f02:	f000 fde7 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10d      	bne.n	8000f28 <HAL_GPIO_EXTI_Callback+0xa0>
					i -= 1;
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	73bb      	strb	r3, [r7, #14]
 8000f12:	e009      	b.n	8000f28 <HAL_GPIO_EXTI_Callback+0xa0>
				}
			}
			else{
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1)){
 8000f14:	2102      	movs	r1, #2
 8000f16:	482b      	ldr	r0, [pc, #172]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f18:	f000 fddc 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d002      	beq.n	8000f28 <HAL_GPIO_EXTI_Callback+0xa0>
					i -= 1;
 8000f22:	7bbb      	ldrb	r3, [r7, #14]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	73bb      	strb	r3, [r7, #14]
		for (uint8_t i = 0; i < 150 ; i++){
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	73bb      	strb	r3, [r7, #14]
 8000f2e:	7bbb      	ldrb	r3, [r7, #14]
 8000f30:	2b95      	cmp	r3, #149	; 0x95
 8000f32:	d9de      	bls.n	8000ef2 <HAL_GPIO_EXTI_Callback+0x6a>
 8000f34:	e027      	b.n	8000f86 <HAL_GPIO_EXTI_Callback+0xfe>
				}
			}
		}
	}

	else if(INT == 3){
 8000f36:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_GPIO_EXTI_Callback+0x134>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d123      	bne.n	8000f86 <HAL_GPIO_EXTI_Callback+0xfe>
		for (uint8_t i = 0; i < 150 ; i++){
 8000f3e:	2300      	movs	r3, #0
 8000f40:	737b      	strb	r3, [r7, #13]
 8000f42:	e01d      	b.n	8000f80 <HAL_GPIO_EXTI_Callback+0xf8>
			if(BLDCstep & 1){
 8000f44:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00a      	beq.n	8000f66 <HAL_GPIO_EXTI_Callback+0xde>
				if(!(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2))){
 8000f50:	2104      	movs	r1, #4
 8000f52:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f54:	f000 fdbe 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10d      	bne.n	8000f7a <HAL_GPIO_EXTI_Callback+0xf2>
					i -= 1;
 8000f5e:	7b7b      	ldrb	r3, [r7, #13]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	737b      	strb	r3, [r7, #13]
 8000f64:	e009      	b.n	8000f7a <HAL_GPIO_EXTI_Callback+0xf2>
				}
			}
			else{
				if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2)){
 8000f66:	2104      	movs	r1, #4
 8000f68:	4816      	ldr	r0, [pc, #88]	; (8000fc4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000f6a:	f000 fdb3 	bl	8001ad4 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <HAL_GPIO_EXTI_Callback+0xf2>
					i -= 1;
 8000f74:	7b7b      	ldrb	r3, [r7, #13]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	737b      	strb	r3, [r7, #13]
		for (uint8_t i = 0; i < 150 ; i++){
 8000f7a:	7b7b      	ldrb	r3, [r7, #13]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	737b      	strb	r3, [r7, #13]
 8000f80:	7b7b      	ldrb	r3, [r7, #13]
 8000f82:	2b95      	cmp	r3, #149	; 0x95
 8000f84:	d9de      	bls.n	8000f44 <HAL_GPIO_EXTI_Callback+0xbc>
				}
			}
		}
	}

	BLDC_state();
 8000f86:	f7ff fcf5 	bl	8000974 <BLDC_state>
	BLDCstep++;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000f94:	701a      	strb	r2, [r3, #0]
	BLDCstep %= 6;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa0:	0899      	lsrs	r1, r3, #2
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	440b      	add	r3, r1
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000fb0:	701a      	strb	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	2000012d 	.word	0x2000012d
 8000fc0:	2000012c 	.word	0x2000012c
 8000fc4:	48000800 	.word	0x48000800
 8000fc8:	aaaaaaab 	.word	0xaaaaaaab

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	6593      	str	r3, [r2, #88]	; 0x58
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800100e:	f000 fe4d 	bl	8001cac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09e      	sub	sp, #120	; 0x78
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001038:	f107 0310 	add.w	r3, r7, #16
 800103c:	2254      	movs	r2, #84	; 0x54
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f003 fe81 	bl	8004d48 <memset>
  if(huart->Instance==LPUART1)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <HAL_UART_MspInit+0xa8>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d136      	bne.n	80010be <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001050:	2320      	movs	r3, #32
 8001052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	4618      	mov	r0, r3
 800105e:	f001 fb63 	bl	8002728 <HAL_RCCEx_PeriphCLKConfig>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001068:	f7ff ffb0 	bl	8000fcc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_UART_MspInit+0xac>)
 800106e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001070:	4a16      	ldr	r2, [pc, #88]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001078:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_UART_MspInit+0xac>)
 800107a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	4a10      	ldr	r2, [pc, #64]	; (80010cc <HAL_UART_MspInit+0xac>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_UART_MspInit+0xac>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2300      	movs	r3, #0
 80010aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010ac:	230c      	movs	r3, #12
 80010ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010b4:	4619      	mov	r1, r3
 80010b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ba:	f000 fb89 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3778      	adds	r7, #120	; 0x78
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40008000 	.word	0x40008000
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0x38>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d10b      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_TIM_Base_MspInit+0x3c>)
 80010e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e6:	4a09      	ldr	r2, [pc, #36]	; (800110c <HAL_TIM_Base_MspInit+0x3c>)
 80010e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010ec:	6613      	str	r3, [r2, #96]	; 0x60
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <HAL_TIM_Base_MspInit+0x3c>)
 80010f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40012c00 	.word	0x40012c00
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a12      	ldr	r2, [pc, #72]	; (8001178 <HAL_TIM_MspPostInit+0x68>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d11d      	bne.n	800116e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_TIM_MspPostInit+0x6c>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_TIM_MspPostInit+0x6c>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_TIM_MspPostInit+0x6c>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HA_Pin|HB_Pin|HC_Pin;
 800114a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800114e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001150:	2302      	movs	r3, #2
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800115c:	2306      	movs	r3, #6
 800115e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f000 fb31 	bl	80017d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40012c00 	.word	0x40012c00
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <MemManage_Handler+0x4>

08001192 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001196:	e7fe      	b.n	8001196 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	e7fe      	b.n	800119c <UsageFault_Handler+0x4>

0800119e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011cc:	f000 f8ae 	bl	800132c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Comp1_Pin);
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 fcab 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Comp2_Pin);
 80011e6:	2002      	movs	r0, #2
 80011e8:	f000 fca4 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Comp3_Pin);
 80011f4:	2004      	movs	r0, #4
 80011f6:	f000 fc9d 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}

080011fe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001202:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001206:	f000 fc95 	bl	8001b34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SystemInit+0x20>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SystemInit+0x20>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001234:	480d      	ldr	r0, [pc, #52]	; (800126c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001236:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001238:	f7ff ffea 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480c      	ldr	r0, [pc, #48]	; (8001270 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0a      	ldr	r2, [pc, #40]	; (800127c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0a      	ldr	r4, [pc, #40]	; (8001280 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001262:	f003 fd4d 	bl	8004d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001266:	f7ff f959 	bl	800051c <main>

0800126a <LoopForever>:

LoopForever:
    b LoopForever
 800126a:	e7fe      	b.n	800126a <LoopForever>
  ldr   r0, =_estack
 800126c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001278:	08004dc0 	.word	0x08004dc0
  ldr r2, =_sbss
 800127c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001280:	20000134 	.word	0x20000134

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>

08001286 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f97f 	bl	8001594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001296:	2000      	movs	r0, #0
 8001298:	f000 f80e 	bl	80012b8 <HAL_InitTick>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e001      	b.n	80012ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a8:	f7ff fe96 	bl	8000fd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ac:	79fb      	ldrb	r3, [r7, #7]

}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012c4:	4b16      	ldr	r3, [pc, #88]	; (8001320 <HAL_InitTick+0x68>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d022      	beq.n	8001312 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_InitTick+0x6c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <HAL_InitTick+0x68>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f998 	bl	8001616 <HAL_SYSTICK_Config>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10f      	bne.n	800130c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	d809      	bhi.n	8001306 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f2:	2200      	movs	r2, #0
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	f04f 30ff 	mov.w	r0, #4294967295
 80012fa:	f000 f956 	bl	80015aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_InitTick+0x70>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	e007      	b.n	8001316 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e004      	b.n	8001316 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e001      	b.n	8001316 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001316:	7bfb      	ldrb	r3, [r7, #15]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000014 	.word	0x20000014
 8001324:	2000000c 	.word	0x2000000c
 8001328:	20000010 	.word	0x20000010

0800132c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_IncTick+0x1c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <HAL_IncTick+0x20>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4413      	add	r3, r2
 800133a:	4a03      	ldr	r2, [pc, #12]	; (8001348 <HAL_IncTick+0x1c>)
 800133c:	6013      	str	r3, [r2, #0]
}
 800133e:	bf00      	nop
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	20000130 	.word	0x20000130
 800134c:	20000014 	.word	0x20000014

08001350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  return uwTick;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetTick+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
}
 8001358:	4618      	mov	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000130 	.word	0x20000130

08001368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff ffee 	bl	8001350 <HAL_GetTick>
 8001374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001380:	d004      	beq.n	800138c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_Delay+0x40>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	4413      	add	r3, r2
 800138a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800138c:	bf00      	nop
 800138e:	f7ff ffdf 	bl	8001350 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	429a      	cmp	r2, r3
 800139c:	d8f7      	bhi.n	800138e <HAL_Delay+0x26>
  {
  }
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3710      	adds	r7, #16
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000014 	.word	0x20000014

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4907      	ldr	r1, [pc, #28]	; (8001448 <__NVIC_EnableIRQ+0x38>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	2b00      	cmp	r3, #0
 800145c:	db12      	blt.n	8001484 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	f003 021f 	and.w	r2, r3, #31
 8001464:	490a      	ldr	r1, [pc, #40]	; (8001490 <__NVIC_DisableIRQ+0x44>)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2001      	movs	r0, #1
 800146e:	fa00 f202 	lsl.w	r2, r0, r2
 8001472:	3320      	adds	r3, #32
 8001474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001478:	f3bf 8f4f 	dsb	sy
}
 800147c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800147e:	f3bf 8f6f 	isb	sy
}
 8001482:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	; (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	; (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	; 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001560:	d301      	bcc.n	8001566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001562:	2301      	movs	r3, #1
 8001564:	e00f      	b.n	8001586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001566:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <SysTick_Config+0x40>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156e:	210f      	movs	r1, #15
 8001570:	f04f 30ff 	mov.w	r0, #4294967295
 8001574:	f7ff ff8e 	bl	8001494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x40>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x40>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff ff05 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b086      	sub	sp, #24
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	60b9      	str	r1, [r7, #8]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015b8:	f7ff ff1c 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 80015bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	6978      	ldr	r0, [r7, #20]
 80015c4:	f7ff ff90 	bl	80014e8 <NVIC_EncodePriority>
 80015c8:	4602      	mov	r2, r0
 80015ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff ff5f 	bl	8001494 <__NVIC_SetPriority>
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff0f 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b082      	sub	sp, #8
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff1f 	bl	800144c <__NVIC_DisableIRQ>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff ff96 	bl	8001550 <SysTick_Config>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t linepos;
  uint32_t maskline;
  uint32_t offset;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_EXTI_SetConfigLine+0x16>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0b3      	b.n	80017b2 <HAL_EXTI_SetConfigLine+0x182>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	601a      	str	r2, [r3, #0]

  /* Compute line register offset */
  offset = ((pExtiConfig->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	0c1b      	lsrs	r3, r3, #16
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
  /* Compute line position */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	617b      	str	r3, [r7, #20]
  /* Compute line mask */
  maskline = (1uL << linepos);
 8001668:	2201      	movs	r2, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d060      	beq.n	8001740 <HAL_EXTI_SetConfigLine+0x110>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    regaddr = (&EXTI->RTSR1 + (EXTI_CONFIG_OFFSET * offset));
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	4b4f      	ldr	r3, [pc, #316]	; (80017c0 <HAL_EXTI_SetConfigLine+0x190>)
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d004      	beq.n	80016a4 <HAL_EXTI_SetConfigLine+0x74>
    {
      regval |= maskline;
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61fb      	str	r3, [r7, #28]
 80016a2:	e004      	b.n	80016ae <HAL_EXTI_SetConfigLine+0x7e>
    }
    else
    {
      regval &= ~maskline;
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	4013      	ands	r3, r2
 80016ac:	61fb      	str	r3, [r7, #28]
    }

    /* Store rising trigger mode */
    *regaddr = regval;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	69fa      	ldr	r2, [r7, #28]
 80016b2:	601a      	str	r2, [r3, #0]

    /* Configure falling trigger */
    regaddr = (&EXTI->FTSR1 + (EXTI_CONFIG_OFFSET * offset));
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	4b42      	ldr	r3, [pc, #264]	; (80017c4 <HAL_EXTI_SetConfigLine+0x194>)
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
    regval = *regaddr;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61fb      	str	r3, [r7, #28]

    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d004      	beq.n	80016da <HAL_EXTI_SetConfigLine+0xaa>
    {
      regval |= maskline;
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61fb      	str	r3, [r7, #28]
 80016d8:	e004      	b.n	80016e4 <HAL_EXTI_SetConfigLine+0xb4>
    }
    else
    {
      regval &= ~maskline;
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	43db      	mvns	r3, r3
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61fb      	str	r3, [r7, #28]
    }

    /* Store falling trigger mode */
    *regaddr = regval;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	69fa      	ldr	r2, [r7, #28]
 80016e8:	601a      	str	r2, [r3, #0]

    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80016f2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80016f6:	d123      	bne.n	8001740 <HAL_EXTI_SetConfigLine+0x110>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 80016f8:	4a33      	ldr	r2, [pc, #204]	; (80017c8 <HAL_EXTI_SetConfigLine+0x198>)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	61fb      	str	r3, [r7, #28]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	2207      	movs	r2, #7
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	4013      	ands	r3, r2
 800171a:	61fb      	str	r3, [r7, #28]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68da      	ldr	r2, [r3, #12]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	4313      	orrs	r3, r2
 8001730:	61fb      	str	r3, [r7, #28]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8001732:	4925      	ldr	r1, [pc, #148]	; (80017c8 <HAL_EXTI_SetConfigLine+0x198>)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  regaddr = (&EXTI->IMR1 + (EXTI_MODE_OFFSET * offset));
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	015b      	lsls	r3, r3, #5
 8001744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001748:	f503 3382 	add.w	r3, r3, #66560	; 0x10400
 800174c:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d004      	beq.n	800176a <HAL_EXTI_SetConfigLine+0x13a>
  {
    regval |= maskline;
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	e004      	b.n	8001774 <HAL_EXTI_SetConfigLine+0x144>
  }
  else
  {
    regval &= ~maskline;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	4013      	ands	r3, r2
 8001772:	61fb      	str	r3, [r7, #28]
  }

  /* Store interrupt mode */
  *regaddr = regval;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	69fa      	ldr	r2, [r7, #28]
 8001778:	601a      	str	r2, [r3, #0]

  /* Configure event mode : read current mode */
  regaddr = (&EXTI->EMR1 + (EXTI_MODE_OFFSET * offset));
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_EXTI_SetConfigLine+0x19c>)
 8001780:	4413      	add	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_EXTI_SetConfigLine+0x170>
  {
    regval |= maskline;
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e004      	b.n	80017aa <HAL_EXTI_SetConfigLine+0x17a>
  }
  else
  {
    regval &= ~maskline;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69fa      	ldr	r2, [r7, #28]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61fb      	str	r3, [r7, #28]
  }

  /* Store event mode */
  *regaddr = regval;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	; 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40010408 	.word	0x40010408
 80017c4:	4001040c 	.word	0x4001040c
 80017c8:	40010000 	.word	0x40010000
 80017cc:	40010404 	.word	0x40010404

080017d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b087      	sub	sp, #28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017de:	e15a      	b.n	8001a96 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2101      	movs	r1, #1
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 814c 	beq.w	8001a90 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800180c:	2b02      	cmp	r3, #2
 800180e:	d130      	bne.n	8001872 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	4013      	ands	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001846:	2201      	movs	r2, #1
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	f003 0201 	and.w	r2, r3, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b03      	cmp	r3, #3
 800187c:	d017      	beq.n	80018ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	2203      	movs	r2, #3
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d123      	bne.n	8001902 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691a      	ldr	r2, [r3, #16]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	08da      	lsrs	r2, r3, #3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3208      	adds	r2, #8
 80018fc:	6939      	ldr	r1, [r7, #16]
 80018fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	2203      	movs	r2, #3
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a6 	beq.w	8001a90 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <HAL_GPIO_Init+0x2e4>)
 8001946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001948:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_GPIO_Init+0x2e4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	6613      	str	r3, [r2, #96]	; 0x60
 8001950:	4b58      	ldr	r3, [pc, #352]	; (8001ab4 <HAL_GPIO_Init+0x2e4>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195c:	4a56      	ldr	r2, [pc, #344]	; (8001ab8 <HAL_GPIO_Init+0x2e8>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001986:	d01f      	beq.n	80019c8 <HAL_GPIO_Init+0x1f8>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x2ec>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d019      	beq.n	80019c4 <HAL_GPIO_Init+0x1f4>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_GPIO_Init+0x2f0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x1f0>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_GPIO_Init+0x2f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1ec>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_GPIO_Init+0x2f8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1e8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a48      	ldr	r2, [pc, #288]	; (8001acc <HAL_GPIO_Init+0x2fc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1e4>
 80019b0:	2305      	movs	r3, #5
 80019b2:	e00a      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019b4:	2306      	movs	r3, #6
 80019b6:	e008      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019b8:	2304      	movs	r3, #4
 80019ba:	e006      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019bc:	2303      	movs	r3, #3
 80019be:	e004      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019c0:	2302      	movs	r3, #2
 80019c2:	e002      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_GPIO_Init+0x1fa>
 80019c8:	2300      	movs	r3, #0
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	0092      	lsls	r2, r2, #2
 80019d2:	4093      	lsls	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019da:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_GPIO_Init+0x2e8>)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e8:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a0c:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a12:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a36:	4a26      	ldr	r2, [pc, #152]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a3c:	4b24      	ldr	r3, [pc, #144]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a60:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4a11      	ldr	r2, [pc, #68]	; (8001ad0 <HAL_GPIO_Init+0x300>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f47f ae9d 	bne.w	80017e0 <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	48000400 	.word	0x48000400
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000c00 	.word	0x48000c00
 8001ac8:	48001000 	.word	0x48001000
 8001acc:	48001400 	.word	0x48001400
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	887b      	ldrh	r3, [r7, #2]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e001      	b.n	8001af6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]
 8001b10:	4613      	mov	r3, r2
 8001b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b14:	787b      	ldrb	r3, [r7, #1]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b1a:	887a      	ldrh	r2, [r7, #2]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b20:	e002      	b.n	8001b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b22:	887a      	ldrh	r2, [r7, #2]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f998 	bl	8000e88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010400 	.word	0x40010400

08001b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d141      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7e:	d131      	bne.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b80:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b98:	4a41      	ldr	r2, [pc, #260]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ba0:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2232      	movs	r2, #50	; 0x32
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	4a3f      	ldr	r2, [pc, #252]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bac:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb0:	0c9b      	lsrs	r3, r3, #18
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb6:	e002      	b.n	8001bbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bbe:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bca:	d102      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f2      	bne.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bde:	d158      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e057      	b.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bf4:	e04d      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bfc:	d141      	bne.n	8001c82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfe:	4b28      	ldr	r3, [pc, #160]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d131      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c0c:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c24:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2232      	movs	r2, #50	; 0x32
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	0c9b      	lsrs	r3, r3, #18
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c42:	e002      	b.n	8001c4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c56:	d102      	bne.n	8001c5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f2      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d112      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e011      	b.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c76:	4a0a      	ldr	r2, [pc, #40]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c80:	e007      	b.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c8a:	4a05      	ldr	r2, [pc, #20]	; (8001ca0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	40007000 	.word	0x40007000
 8001ca4:	2000000c 	.word	0x2000000c
 8001ca8:	431bde83 	.word	0x431bde83

08001cac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cba:	6093      	str	r3, [r2, #8]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40007000 	.word	0x40007000

08001ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e2fe      	b.n	80022dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d075      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4b97      	ldr	r3, [pc, #604]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4b94      	ldr	r3, [pc, #592]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b0c      	cmp	r3, #12
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3e>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d002      	beq.n	8001d10 <HAL_RCC_OscConfig+0x44>
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d10b      	bne.n	8001d28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	4b8d      	ldr	r3, [pc, #564]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d05b      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x108>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d157      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e2d9      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d30:	d106      	bne.n	8001d40 <HAL_RCC_OscConfig+0x74>
 8001d32:	4b85      	ldr	r3, [pc, #532]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a84      	ldr	r2, [pc, #528]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0xb0>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x98>
 8001d4a:	4b7f      	ldr	r3, [pc, #508]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a7e      	ldr	r2, [pc, #504]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b7c      	ldr	r3, [pc, #496]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7b      	ldr	r2, [pc, #492]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xb0>
 8001d64:	4b78      	ldr	r3, [pc, #480]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a77      	ldr	r2, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d6e:	6013      	str	r3, [r2, #0]
 8001d70:	4b75      	ldr	r3, [pc, #468]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a74      	ldr	r2, [pc, #464]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fae4 	bl	8001350 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fae0 	bl	8001350 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e29e      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9e:	4b6a      	ldr	r3, [pc, #424]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0xc0>
 8001daa:	e014      	b.n	8001dd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fad0 	bl	8001350 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db4:	f7ff facc 	bl	8001350 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e28a      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc6:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0xe8>
 8001dd2:	e000      	b.n	8001dd6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001de2:	4b59      	ldr	r3, [pc, #356]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dec:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d102      	bne.n	8001e02 <HAL_RCC_OscConfig+0x136>
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d002      	beq.n	8001e08 <HAL_RCC_OscConfig+0x13c>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d11f      	bne.n	8001e48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x154>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e25d      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e20:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	061b      	lsls	r3, r3, #24
 8001e2e:	4946      	ldr	r1, [pc, #280]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e34:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <HAL_RCC_OscConfig+0x280>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fa3d 	bl	80012b8 <HAL_InitTick>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d043      	beq.n	8001ecc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e249      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d023      	beq.n	8001e98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e50:	4b3d      	ldr	r3, [pc, #244]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a3c      	ldr	r2, [pc, #240]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fa78 	bl	8001350 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7ff fa74 	bl	8001350 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e232      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e82:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	061b      	lsls	r3, r3, #24
 8001e90:	492d      	ldr	r1, [pc, #180]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
 8001e96:	e01a      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff fa54 	bl	8001350 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eac:	f7ff fa50 	bl	8001350 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e20e      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x1e0>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d041      	beq.n	8001f5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01c      	beq.n	8001f1c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee8:	4a17      	ldr	r2, [pc, #92]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fa2d 	bl	8001350 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff fa29 	bl	8001350 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e1e7      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0ef      	beq.n	8001efa <HAL_RCC_OscConfig+0x22e>
 8001f1a:	e020      	b.n	8001f5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f22:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fa10 	bl	8001350 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f32:	e00d      	b.n	8001f50 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff fa0c 	bl	8001350 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d906      	bls.n	8001f50 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1ca      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f50:	4b8c      	ldr	r3, [pc, #560]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1ea      	bne.n	8001f34 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80a6 	beq.w	80020b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f70:	4b84      	ldr	r3, [pc, #528]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2b4>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_RCC_OscConfig+0x2b6>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00d      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	4b7f      	ldr	r3, [pc, #508]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f90:	6593      	str	r3, [r2, #88]	; 0x58
 8001f92:	4b7c      	ldr	r3, [pc, #496]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa2:	4b79      	ldr	r3, [pc, #484]	; (8002188 <HAL_RCC_OscConfig+0x4bc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d118      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fae:	4b76      	ldr	r3, [pc, #472]	; (8002188 <HAL_RCC_OscConfig+0x4bc>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a75      	ldr	r2, [pc, #468]	; (8002188 <HAL_RCC_OscConfig+0x4bc>)
 8001fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f9c9 	bl	8001350 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc2:	f7ff f9c5 	bl	8001350 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e183      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd4:	4b6c      	ldr	r3, [pc, #432]	; (8002188 <HAL_RCC_OscConfig+0x4bc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d108      	bne.n	8001ffa <HAL_RCC_OscConfig+0x32e>
 8001fe8:	4b66      	ldr	r3, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	4a65      	ldr	r2, [pc, #404]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ff8:	e024      	b.n	8002044 <HAL_RCC_OscConfig+0x378>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d110      	bne.n	8002024 <HAL_RCC_OscConfig+0x358>
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800200a:	f043 0304 	orr.w	r3, r3, #4
 800200e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	4a5a      	ldr	r2, [pc, #360]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002022:	e00f      	b.n	8002044 <HAL_RCC_OscConfig+0x378>
 8002024:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202a:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800203c:	f023 0304 	bic.w	r3, r3, #4
 8002040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d016      	beq.n	800207a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f980 	bl	8001350 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002052:	e00a      	b.n	800206a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002054:	f7ff f97c 	bl	8001350 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e138      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206a:	4b46      	ldr	r3, [pc, #280]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800206c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ed      	beq.n	8002054 <HAL_RCC_OscConfig+0x388>
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7ff f969 	bl	8001350 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff f965 	bl	8001350 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e121      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002098:	4b3a      	ldr	r3, [pc, #232]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ed      	bne.n	8002082 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020a6:	7ffb      	ldrb	r3, [r7, #31]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b0:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03c      	beq.n	800213e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01c      	beq.n	8002106 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020cc:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f938 	bl	8001350 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020e4:	f7ff f934 	bl	8001350 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0f2      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80020f6:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 80020f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ef      	beq.n	80020e4 <HAL_RCC_OscConfig+0x418>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff f91b 	bl	8001350 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211e:	f7ff f917 	bl	8001350 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e0d5      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002132:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 80c9 	beq.w	80022da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
 8002150:	2b0c      	cmp	r3, #12
 8002152:	f000 8083 	beq.w	800225c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d15e      	bne.n	800221c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff f8f1 	bl	8001350 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	e00c      	b.n	800218c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff f8ed 	bl	8001350 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d905      	bls.n	800218c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e0ab      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	4b55      	ldr	r3, [pc, #340]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1ec      	bne.n	8002172 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002198:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	4b52      	ldr	r3, [pc, #328]	; (80022e8 <HAL_RCC_OscConfig+0x61c>)
 800219e:	4013      	ands	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6a11      	ldr	r1, [r2, #32]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a8:	3a01      	subs	r2, #1
 80021aa:	0112      	lsls	r2, r2, #4
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80021b2:	0212      	lsls	r2, r2, #8
 80021b4:	4311      	orrs	r1, r2
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ba:	0852      	lsrs	r2, r2, #1
 80021bc:	3a01      	subs	r2, #1
 80021be:	0552      	lsls	r2, r2, #21
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021c6:	0852      	lsrs	r2, r2, #1
 80021c8:	3a01      	subs	r2, #1
 80021ca:	0652      	lsls	r2, r2, #25
 80021cc:	4311      	orrs	r1, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80021d2:	06d2      	lsls	r2, r2, #27
 80021d4:	430a      	orrs	r2, r1
 80021d6:	4943      	ldr	r1, [pc, #268]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021dc:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a40      	ldr	r2, [pc, #256]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff f8ac 	bl	8001350 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021fc:	f7ff f8a8 	bl	8001350 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e066      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0x530>
 800221a:	e05e      	b.n	80022da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a30      	ldr	r2, [pc, #192]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002222:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff f892 	bl	8001350 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff f88e 	bl	8001350 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e04c      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002242:	4b28      	ldr	r3, [pc, #160]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800224e:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	4924      	ldr	r1, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 8002254:	4b25      	ldr	r3, [pc, #148]	; (80022ec <HAL_RCC_OscConfig+0x620>)
 8002256:	4013      	ands	r3, r2
 8002258:	60cb      	str	r3, [r1, #12]
 800225a:	e03e      	b.n	80022da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e039      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <HAL_RCC_OscConfig+0x618>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	429a      	cmp	r2, r3
 800227a:	d12c      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	3b01      	subs	r3, #1
 8002288:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d123      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229a:	429a      	cmp	r2, r3
 800229c:	d11b      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d113      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	3b01      	subs	r3, #1
 80022bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	3b01      	subs	r3, #1
 80022d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d001      	beq.n	80022da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80022da:	2300      	movs	r3, #0
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3720      	adds	r7, #32
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40021000 	.word	0x40021000
 80022e8:	019f800c 	.word	0x019f800c
 80022ec:	feeefffc 	.word	0xfeeefffc

080022f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e11e      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002308:	4b91      	ldr	r3, [pc, #580]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d910      	bls.n	8002338 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b8e      	ldr	r3, [pc, #568]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f023 020f 	bic.w	r2, r3, #15
 800231e:	498c      	ldr	r1, [pc, #560]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b8a      	ldr	r3, [pc, #552]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e106      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d073      	beq.n	800242c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d129      	bne.n	80023a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0f4      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800235c:	f000 f99e 	bl	800269c <RCC_GetSysClockFreqFromPLLSource>
 8002360:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_ClockConfig+0x268>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d93f      	bls.n	80023ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800236a:	4b7a      	ldr	r3, [pc, #488]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800237e:	2b00      	cmp	r3, #0
 8002380:	d033      	beq.n	80023ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d12f      	bne.n	80023ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800238a:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002392:	4a70      	ldr	r2, [pc, #448]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002398:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e024      	b.n	80023ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d109      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0c6      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0be      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023c8:	f000 f8ce 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 80023cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4a61      	ldr	r2, [pc, #388]	; (8002558 <HAL_RCC_ClockConfig+0x268>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d909      	bls.n	80023ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023d6:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023de:	4a5d      	ldr	r2, [pc, #372]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4957      	ldr	r1, [pc, #348]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023fc:	f7fe ffa8 	bl	8001350 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe ffa4 	bl	8001350 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e095      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d023      	beq.n	8002480 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a42      	ldr	r2, [pc, #264]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800244a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800244e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0308 	and.w	r3, r3, #8
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800245c:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002464:	4a3b      	ldr	r2, [pc, #236]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800246a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800246c:	4b39      	ldr	r3, [pc, #228]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800247a:	4313      	orrs	r3, r2
 800247c:	608b      	str	r3, [r1, #8]
 800247e:	e008      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d105      	bne.n	8002492 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002486:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 800248c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002490:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002492:	4b2f      	ldr	r3, [pc, #188]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d21d      	bcs.n	80024dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a0:	4b2b      	ldr	r3, [pc, #172]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f023 020f 	bic.w	r2, r3, #15
 80024a8:	4929      	ldr	r1, [pc, #164]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024b0:	f7fe ff4e 	bl	8001350 <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b8:	f7fe ff4a 	bl	8001350 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e03b      	b.n	8002546 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_ClockConfig+0x260>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d1ed      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4917      	ldr	r1, [pc, #92]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	490f      	ldr	r1, [pc, #60]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002516:	4313      	orrs	r3, r2
 8002518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800251a:	f000 f825 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 800251e:	4602      	mov	r2, r0
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCC_ClockConfig+0x264>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	490c      	ldr	r1, [pc, #48]	; (800255c <HAL_RCC_ClockConfig+0x26c>)
 800252c:	5ccb      	ldrb	r3, [r1, r3]
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	fa22 f303 	lsr.w	r3, r2, r3
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <HAL_RCC_ClockConfig+0x270>)
 8002538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe feba 	bl	80012b8 <HAL_InitTick>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40022000 	.word	0x40022000
 8002554:	40021000 	.word	0x40021000
 8002558:	04c4b400 	.word	0x04c4b400
 800255c:	08004d70 	.word	0x08004d70
 8002560:	2000000c 	.word	0x2000000c
 8002564:	20000010 	.word	0x20000010

08002568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
 8002576:	2b04      	cmp	r3, #4
 8002578:	d102      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e047      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 030c 	and.w	r3, r3, #12
 8002588:	2b08      	cmp	r3, #8
 800258a:	d102      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc0>)
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e03e      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002592:	4b23      	ldr	r3, [pc, #140]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b0c      	cmp	r3, #12
 800259c:	d136      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800259e:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025a8:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	091b      	lsrs	r3, r3, #4
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3301      	adds	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d10c      	bne.n	80025d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c4:	4a16      	ldr	r2, [pc, #88]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	0a12      	lsrs	r2, r2, #8
 80025ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	617b      	str	r3, [r7, #20]
      break;
 80025d4:	e00c      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	fbb2 f3f3 	udiv	r3, r2, r3
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e0:	68d2      	ldr	r2, [r2, #12]
 80025e2:	0a12      	lsrs	r2, r2, #8
 80025e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]
      break;
 80025ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	0e5b      	lsrs	r3, r3, #25
 80025f6:	f003 0303 	and.w	r3, r3, #3
 80025fa:	3301      	adds	r3, #1
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	e001      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002610:	693b      	ldr	r3, [r7, #16]
}
 8002612:	4618      	mov	r0, r3
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000
 8002624:	00f42400 	.word	0x00f42400
 8002628:	016e3600 	.word	0x016e3600

0800262c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002630:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_GetHCLKFreq+0x14>)
 8002632:	681b      	ldr	r3, [r3, #0]
}
 8002634:	4618      	mov	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000000c 	.word	0x2000000c

08002644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002648:	f7ff fff0 	bl	800262c <HAL_RCC_GetHCLKFreq>
 800264c:	4602      	mov	r2, r0
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	f003 0307 	and.w	r3, r3, #7
 8002658:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCC_GetPCLK1Freq+0x28>)
 800265a:	5ccb      	ldrb	r3, [r1, r3]
 800265c:	f003 031f 	and.w	r3, r3, #31
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	08004d80 	.word	0x08004d80

08002670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002674:	f7ff ffda 	bl	800262c <HAL_RCC_GetHCLKFreq>
 8002678:	4602      	mov	r2, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	0adb      	lsrs	r3, r3, #11
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	4904      	ldr	r1, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002686:	5ccb      	ldrb	r3, [r1, r3]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	08004d80 	.word	0x08004d80

0800269c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3301      	adds	r3, #1
 80026b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d10c      	bne.n	80026da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026ca:	68d2      	ldr	r2, [r2, #12]
 80026cc:	0a12      	lsrs	r2, r2, #8
 80026ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	617b      	str	r3, [r7, #20]
    break;
 80026d8:	e00c      	b.n	80026f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4a0e      	ldr	r2, [pc, #56]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026e4:	68d2      	ldr	r2, [r2, #12]
 80026e6:	0a12      	lsrs	r2, r2, #8
 80026e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026ec:	fb02 f303 	mul.w	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    break;
 80026f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0e5b      	lsrs	r3, r3, #25
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800270e:	687b      	ldr	r3, [r7, #4]
}
 8002710:	4618      	mov	r0, r3
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000
 8002720:	016e3600 	.word	0x016e3600
 8002724:	00f42400 	.word	0x00f42400

08002728 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002730:	2300      	movs	r3, #0
 8002732:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002734:	2300      	movs	r3, #0
 8002736:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 8098 	beq.w	8002876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002746:	2300      	movs	r3, #0
 8002748:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274a:	4b43      	ldr	r3, [pc, #268]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10d      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	; 0x58
 8002762:	4b3d      	ldr	r3, [pc, #244]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a39      	ldr	r2, [pc, #228]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800277e:	f7fe fde7 	bl	8001350 <HAL_GetTick>
 8002782:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002784:	e009      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe fde3 	bl	8001350 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d902      	bls.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	74fb      	strb	r3, [r7, #19]
        break;
 8002798:	e005      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ef      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d159      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01e      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d019      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027c8:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	4a1f      	ldr	r2, [pc, #124]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027e4:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ea:	4a1b      	ldr	r2, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027f4:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d016      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fda3 	bl	8001350 <HAL_GetTick>
 800280a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800280c:	e00b      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fd9f 	bl	8001350 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d902      	bls.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	74fb      	strb	r3, [r7, #19]
            break;
 8002824:	e006      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002826:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0ec      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002850:	e008      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	74bb      	strb	r3, [r7, #18]
 8002856:	e005      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	7cfb      	ldrb	r3, [r7, #19]
 8002862:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002864:	7c7b      	ldrb	r3, [r7, #17]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d105      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800286a:	4ba7      	ldr	r3, [pc, #668]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4aa6      	ldr	r2, [pc, #664]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002882:	4ba1      	ldr	r3, [pc, #644]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002888:	f023 0203 	bic.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	499d      	ldr	r1, [pc, #628]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028a4:	4b98      	ldr	r3, [pc, #608]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f023 020c 	bic.w	r2, r3, #12
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	4995      	ldr	r1, [pc, #596]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028c6:	4b90      	ldr	r3, [pc, #576]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	498c      	ldr	r1, [pc, #560]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028e8:	4b87      	ldr	r3, [pc, #540]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	4984      	ldr	r1, [pc, #528]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800290a:	4b7f      	ldr	r3, [pc, #508]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	497b      	ldr	r1, [pc, #492]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800292c:	4b76      	ldr	r3, [pc, #472]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	4973      	ldr	r1, [pc, #460]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	496a      	ldr	r1, [pc, #424]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00a      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002970:	4b65      	ldr	r3, [pc, #404]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002976:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4962      	ldr	r1, [pc, #392]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002992:	4b5d      	ldr	r3, [pc, #372]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	4959      	ldr	r1, [pc, #356]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00a      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029b4:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029ba:	f023 0203 	bic.w	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	4951      	ldr	r1, [pc, #324]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00a      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4948      	ldr	r1, [pc, #288]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f8:	4b43      	ldr	r3, [pc, #268]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	4940      	ldr	r1, [pc, #256]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a3a      	ldr	r2, [pc, #232]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a30:	4b35      	ldr	r3, [pc, #212]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	4932      	ldr	r1, [pc, #200]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a2c      	ldr	r2, [pc, #176]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	4924      	ldr	r1, [pc, #144]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a86:	d105      	bne.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4a1e      	ldr	r2, [pc, #120]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	4916      	ldr	r1, [pc, #88]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d019      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af6:	d109      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a02      	ldr	r2, [pc, #8]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	e002      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d015      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b26:	4926      	ldr	r1, [pc, #152]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b36:	d105      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b38:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b5e:	4918      	ldr	r1, [pc, #96]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b6e:	d105      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d015      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002bb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e049      	b.n	8002c6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7fe fa70 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f000 fc44 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04c      	b.n	8002d26 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <HAL_TIM_Base_Start+0xc0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d022      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca6:	d01d      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	; (8002d38 <HAL_TIM_Base_Start+0xc4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d018      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	; (8002d3c <HAL_TIM_Base_Start+0xc8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_TIM_Base_Start+0xcc>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00e      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a1e      	ldr	r2, [pc, #120]	; (8002d44 <HAL_TIM_Base_Start+0xd0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d009      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_TIM_Base_Start+0xd4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIM_Base_Start+0x70>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_TIM_Base_Start+0xd8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d115      	bne.n	8002d10 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_TIM_Base_Start+0xdc>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d015      	beq.n	8002d22 <HAL_TIM_Base_Start+0xae>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d011      	beq.n	8002d22 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	e008      	b.n	8002d22 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e000      	b.n	8002d24 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	40012c00 	.word	0x40012c00
 8002d38:	40000400 	.word	0x40000400
 8002d3c:	40000800 	.word	0x40000800
 8002d40:	40000c00 	.word	0x40000c00
 8002d44:	40013400 	.word	0x40013400
 8002d48:	40014000 	.word	0x40014000
 8002d4c:	40015000 	.word	0x40015000
 8002d50:	00010007 	.word	0x00010007

08002d54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e049      	b.n	8002dfa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f841 	bl	8002e02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	3304      	adds	r3, #4
 8002d90:	4619      	mov	r1, r3
 8002d92:	4610      	mov	r0, r2
 8002d94:	f000 fb7c 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d109      	bne.n	8002e3c <HAL_TIM_PWM_Start+0x24>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e03c      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x9e>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d109      	bne.n	8002e56 <HAL_TIM_PWM_Start+0x3e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	bf14      	ite	ne
 8002e4e:	2301      	movne	r3, #1
 8002e50:	2300      	moveq	r3, #0
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	e02f      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x9e>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d109      	bne.n	8002e70 <HAL_TIM_PWM_Start+0x58>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e022      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x9e>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b0c      	cmp	r3, #12
 8002e74:	d109      	bne.n	8002e8a <HAL_TIM_PWM_Start+0x72>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e015      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x9e>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b10      	cmp	r3, #16
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start+0x8c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e008      	b.n	8002eb6 <HAL_TIM_PWM_Start+0x9e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e0a6      	b.n	800300c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <HAL_TIM_PWM_Start+0xb6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ecc:	e023      	b.n	8002f16 <HAL_TIM_PWM_Start+0xfe>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d104      	bne.n	8002ede <HAL_TIM_PWM_Start+0xc6>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002edc:	e01b      	b.n	8002f16 <HAL_TIM_PWM_Start+0xfe>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0xd6>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eec:	e013      	b.n	8002f16 <HAL_TIM_PWM_Start+0xfe>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0xe6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002efc:	e00b      	b.n	8002f16 <HAL_TIM_PWM_Start+0xfe>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0xf6>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f0c:	e003      	b.n	8002f16 <HAL_TIM_PWM_Start+0xfe>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 ff30 	bl	8003d84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a3a      	ldr	r2, [pc, #232]	; (8003014 <HAL_TIM_PWM_Start+0x1fc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d018      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x148>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a39      	ldr	r2, [pc, #228]	; (8003018 <HAL_TIM_PWM_Start+0x200>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x148>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a37      	ldr	r2, [pc, #220]	; (800301c <HAL_TIM_PWM_Start+0x204>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00e      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x148>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a36      	ldr	r2, [pc, #216]	; (8003020 <HAL_TIM_PWM_Start+0x208>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d009      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x148>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a34      	ldr	r2, [pc, #208]	; (8003024 <HAL_TIM_PWM_Start+0x20c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d004      	beq.n	8002f60 <HAL_TIM_PWM_Start+0x148>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_TIM_PWM_Start+0x210>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIM_PWM_Start+0x14c>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_TIM_PWM_Start+0x14e>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a25      	ldr	r2, [pc, #148]	; (8003014 <HAL_TIM_PWM_Start+0x1fc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d022      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8c:	d01d      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a26      	ldr	r2, [pc, #152]	; (800302c <HAL_TIM_PWM_Start+0x214>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d018      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_TIM_PWM_Start+0x218>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d013      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a23      	ldr	r2, [pc, #140]	; (8003034 <HAL_TIM_PWM_Start+0x21c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <HAL_TIM_PWM_Start+0x200>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d009      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <HAL_TIM_PWM_Start+0x204>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_TIM_PWM_Start+0x1b2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a18      	ldr	r2, [pc, #96]	; (8003028 <HAL_TIM_PWM_Start+0x210>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d115      	bne.n	8002ff6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	4b19      	ldr	r3, [pc, #100]	; (8003038 <HAL_TIM_PWM_Start+0x220>)
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b06      	cmp	r3, #6
 8002fda:	d015      	beq.n	8003008 <HAL_TIM_PWM_Start+0x1f0>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe2:	d011      	beq.n	8003008 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff4:	e008      	b.n	8003008 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e000      	b.n	800300a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003008:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40013400 	.word	0x40013400
 800301c:	40014000 	.word	0x40014000
 8003020:	40014400 	.word	0x40014400
 8003024:	40014800 	.word	0x40014800
 8003028:	40015000 	.word	0x40015000
 800302c:	40000400 	.word	0x40000400
 8003030:	40000800 	.word	0x40000800
 8003034:	40000c00 	.word	0x40000c00
 8003038:	00010007 	.word	0x00010007

0800303c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003056:	2302      	movs	r3, #2
 8003058:	e0ff      	b.n	800325a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b14      	cmp	r3, #20
 8003066:	f200 80f0 	bhi.w	800324a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800306a:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	080030c5 	.word	0x080030c5
 8003074:	0800324b 	.word	0x0800324b
 8003078:	0800324b 	.word	0x0800324b
 800307c:	0800324b 	.word	0x0800324b
 8003080:	08003105 	.word	0x08003105
 8003084:	0800324b 	.word	0x0800324b
 8003088:	0800324b 	.word	0x0800324b
 800308c:	0800324b 	.word	0x0800324b
 8003090:	08003147 	.word	0x08003147
 8003094:	0800324b 	.word	0x0800324b
 8003098:	0800324b 	.word	0x0800324b
 800309c:	0800324b 	.word	0x0800324b
 80030a0:	08003187 	.word	0x08003187
 80030a4:	0800324b 	.word	0x0800324b
 80030a8:	0800324b 	.word	0x0800324b
 80030ac:	0800324b 	.word	0x0800324b
 80030b0:	080031c9 	.word	0x080031c9
 80030b4:	0800324b 	.word	0x0800324b
 80030b8:	0800324b 	.word	0x0800324b
 80030bc:	0800324b 	.word	0x0800324b
 80030c0:	08003209 	.word	0x08003209
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68b9      	ldr	r1, [r7, #8]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fa94 	bl	80035f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0208 	orr.w	r2, r2, #8
 80030de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0204 	bic.w	r2, r2, #4
 80030ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	619a      	str	r2, [r3, #24]
      break;
 8003102:	e0a5      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fb0e 	bl	800372c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699a      	ldr	r2, [r3, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6999      	ldr	r1, [r3, #24]
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	021a      	lsls	r2, r3, #8
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	619a      	str	r2, [r3, #24]
      break;
 8003144:	e084      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	4618      	mov	r0, r3
 800314e:	f000 fb81 	bl	8003854 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69da      	ldr	r2, [r3, #28]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0208 	orr.w	r2, r2, #8
 8003160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0204 	bic.w	r2, r2, #4
 8003170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69d9      	ldr	r1, [r3, #28]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	61da      	str	r2, [r3, #28]
      break;
 8003184:	e064      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 fbf3 	bl	8003978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69da      	ldr	r2, [r3, #28]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69d9      	ldr	r1, [r3, #28]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	021a      	lsls	r2, r3, #8
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	61da      	str	r2, [r3, #28]
      break;
 80031c6:	e043      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fc66 	bl	8003aa0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0208 	orr.w	r2, r2, #8
 80031e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0204 	bic.w	r2, r2, #4
 80031f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003206:	e023      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fcb0 	bl	8003b74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003222:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003232:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	021a      	lsls	r2, r3, #8
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003248:	e002      	b.n	8003250 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
      break;
 800324e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003258:	7dfb      	ldrb	r3, [r7, #23]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3718      	adds	r7, #24
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop

08003264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_TIM_ConfigClockSource+0x1c>
 800327c:	2302      	movs	r3, #2
 800327e:	e0f6      	b.n	800346e <HAL_TIM_ConfigClockSource+0x20a>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800329e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a6f      	ldr	r2, [pc, #444]	; (8003478 <HAL_TIM_ConfigClockSource+0x214>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	f000 80c1 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 80032c0:	4a6d      	ldr	r2, [pc, #436]	; (8003478 <HAL_TIM_ConfigClockSource+0x214>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f200 80c6 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 80032c8:	4a6c      	ldr	r2, [pc, #432]	; (800347c <HAL_TIM_ConfigClockSource+0x218>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	f000 80b9 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_TIM_ConfigClockSource+0x218>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	f200 80be 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 80032d8:	4a69      	ldr	r2, [pc, #420]	; (8003480 <HAL_TIM_ConfigClockSource+0x21c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	f000 80b1 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 80032e0:	4a67      	ldr	r2, [pc, #412]	; (8003480 <HAL_TIM_ConfigClockSource+0x21c>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	f200 80b6 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 80032e8:	4a66      	ldr	r2, [pc, #408]	; (8003484 <HAL_TIM_ConfigClockSource+0x220>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f000 80a9 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 80032f0:	4a64      	ldr	r2, [pc, #400]	; (8003484 <HAL_TIM_ConfigClockSource+0x220>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	f200 80ae 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 80032f8:	4a63      	ldr	r2, [pc, #396]	; (8003488 <HAL_TIM_ConfigClockSource+0x224>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f000 80a1 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003300:	4a61      	ldr	r2, [pc, #388]	; (8003488 <HAL_TIM_ConfigClockSource+0x224>)
 8003302:	4293      	cmp	r3, r2
 8003304:	f200 80a6 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003308:	4a60      	ldr	r2, [pc, #384]	; (800348c <HAL_TIM_ConfigClockSource+0x228>)
 800330a:	4293      	cmp	r3, r2
 800330c:	f000 8099 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003310:	4a5e      	ldr	r2, [pc, #376]	; (800348c <HAL_TIM_ConfigClockSource+0x228>)
 8003312:	4293      	cmp	r3, r2
 8003314:	f200 809e 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003318:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800331c:	f000 8091 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003324:	f200 8096 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332c:	f000 8089 	beq.w	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003334:	f200 808e 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333c:	d03e      	beq.n	80033bc <HAL_TIM_ConfigClockSource+0x158>
 800333e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003342:	f200 8087 	bhi.w	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	f000 8086 	beq.w	800345a <HAL_TIM_ConfigClockSource+0x1f6>
 800334e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003352:	d87f      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003354:	2b70      	cmp	r3, #112	; 0x70
 8003356:	d01a      	beq.n	800338e <HAL_TIM_ConfigClockSource+0x12a>
 8003358:	2b70      	cmp	r3, #112	; 0x70
 800335a:	d87b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 800335c:	2b60      	cmp	r3, #96	; 0x60
 800335e:	d050      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0x19e>
 8003360:	2b60      	cmp	r3, #96	; 0x60
 8003362:	d877      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003364:	2b50      	cmp	r3, #80	; 0x50
 8003366:	d03c      	beq.n	80033e2 <HAL_TIM_ConfigClockSource+0x17e>
 8003368:	2b50      	cmp	r3, #80	; 0x50
 800336a:	d873      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d058      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0x1be>
 8003370:	2b40      	cmp	r3, #64	; 0x40
 8003372:	d86f      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003374:	2b30      	cmp	r3, #48	; 0x30
 8003376:	d064      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003378:	2b30      	cmp	r3, #48	; 0x30
 800337a:	d86b      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 800337c:	2b20      	cmp	r3, #32
 800337e:	d060      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003380:	2b20      	cmp	r3, #32
 8003382:	d867      	bhi.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05c      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 8003388:	2b10      	cmp	r3, #16
 800338a:	d05a      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x1de>
 800338c:	e062      	b.n	8003454 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	6899      	ldr	r1, [r3, #8]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f000 fcd1 	bl	8003d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	609a      	str	r2, [r3, #8]
      break;
 80033ba:	e04f      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6818      	ldr	r0, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	6899      	ldr	r1, [r3, #8]
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f000 fcba 	bl	8003d44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033de:	609a      	str	r2, [r3, #8]
      break;
 80033e0:	e03c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6859      	ldr	r1, [r3, #4]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	461a      	mov	r2, r3
 80033f0:	f000 fc2c 	bl	8003c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2150      	movs	r1, #80	; 0x50
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fc85 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003400:	e02c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6859      	ldr	r1, [r3, #4]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	461a      	mov	r2, r3
 8003410:	f000 fc4b 	bl	8003caa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2160      	movs	r1, #96	; 0x60
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fc75 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003420:	e01c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	461a      	mov	r2, r3
 8003430:	f000 fc0c 	bl	8003c4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fc65 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003440:	e00c      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 fc5c 	bl	8003d0a <TIM_ITRx_SetConfig>
      break;
 8003452:	e003      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	73fb      	strb	r3, [r7, #15]
      break;
 8003458:	e000      	b.n	800345c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800345a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	00100070 	.word	0x00100070
 800347c:	00100060 	.word	0x00100060
 8003480:	00100050 	.word	0x00100050
 8003484:	00100040 	.word	0x00100040
 8003488:	00100030 	.word	0x00100030
 800348c:	00100020 	.word	0x00100020

08003490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a4c      	ldr	r2, [pc, #304]	; (80035d4 <TIM_Base_SetConfig+0x144>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d017      	beq.n	80034d8 <TIM_Base_SetConfig+0x48>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ae:	d013      	beq.n	80034d8 <TIM_Base_SetConfig+0x48>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a49      	ldr	r2, [pc, #292]	; (80035d8 <TIM_Base_SetConfig+0x148>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00f      	beq.n	80034d8 <TIM_Base_SetConfig+0x48>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a48      	ldr	r2, [pc, #288]	; (80035dc <TIM_Base_SetConfig+0x14c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00b      	beq.n	80034d8 <TIM_Base_SetConfig+0x48>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a47      	ldr	r2, [pc, #284]	; (80035e0 <TIM_Base_SetConfig+0x150>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0x48>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a46      	ldr	r2, [pc, #280]	; (80035e4 <TIM_Base_SetConfig+0x154>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x48>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a45      	ldr	r2, [pc, #276]	; (80035e8 <TIM_Base_SetConfig+0x158>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d108      	bne.n	80034ea <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a39      	ldr	r2, [pc, #228]	; (80035d4 <TIM_Base_SetConfig+0x144>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d023      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d01f      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a36      	ldr	r2, [pc, #216]	; (80035d8 <TIM_Base_SetConfig+0x148>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01b      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a35      	ldr	r2, [pc, #212]	; (80035dc <TIM_Base_SetConfig+0x14c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d017      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a34      	ldr	r2, [pc, #208]	; (80035e0 <TIM_Base_SetConfig+0x150>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a33      	ldr	r2, [pc, #204]	; (80035e4 <TIM_Base_SetConfig+0x154>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00f      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a33      	ldr	r2, [pc, #204]	; (80035ec <TIM_Base_SetConfig+0x15c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00b      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a32      	ldr	r2, [pc, #200]	; (80035f0 <TIM_Base_SetConfig+0x160>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a31      	ldr	r2, [pc, #196]	; (80035f4 <TIM_Base_SetConfig+0x164>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0xaa>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2c      	ldr	r2, [pc, #176]	; (80035e8 <TIM_Base_SetConfig+0x158>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d108      	bne.n	800354c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <TIM_Base_SetConfig+0x144>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <TIM_Base_SetConfig+0x110>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <TIM_Base_SetConfig+0x154>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00f      	beq.n	80035a0 <TIM_Base_SetConfig+0x110>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <TIM_Base_SetConfig+0x15c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x110>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <TIM_Base_SetConfig+0x160>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x110>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a18      	ldr	r2, [pc, #96]	; (80035f4 <TIM_Base_SetConfig+0x164>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x110>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <TIM_Base_SetConfig+0x158>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d103      	bne.n	80035a8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d105      	bne.n	80035c6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f023 0201 	bic.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	611a      	str	r2, [r3, #16]
  }
}
 80035c6:	bf00      	nop
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	40012c00 	.word	0x40012c00
 80035d8:	40000400 	.word	0x40000400
 80035dc:	40000800 	.word	0x40000800
 80035e0:	40000c00 	.word	0x40000c00
 80035e4:	40013400 	.word	0x40013400
 80035e8:	40015000 	.word	0x40015000
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 0201 	bic.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 0302 	bic.w	r3, r3, #2
 8003644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a30      	ldr	r2, [pc, #192]	; (8003714 <TIM_OC1_SetConfig+0x11c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d013      	beq.n	8003680 <TIM_OC1_SetConfig+0x88>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a2f      	ldr	r2, [pc, #188]	; (8003718 <TIM_OC1_SetConfig+0x120>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00f      	beq.n	8003680 <TIM_OC1_SetConfig+0x88>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a2e      	ldr	r2, [pc, #184]	; (800371c <TIM_OC1_SetConfig+0x124>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00b      	beq.n	8003680 <TIM_OC1_SetConfig+0x88>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a2d      	ldr	r2, [pc, #180]	; (8003720 <TIM_OC1_SetConfig+0x128>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_OC1_SetConfig+0x88>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <TIM_OC1_SetConfig+0x12c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_OC1_SetConfig+0x88>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <TIM_OC1_SetConfig+0x130>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10c      	bne.n	800369a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0308 	bic.w	r3, r3, #8
 8003686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 0304 	bic.w	r3, r3, #4
 8003698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <TIM_OC1_SetConfig+0x11c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <TIM_OC1_SetConfig+0xd2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a1c      	ldr	r2, [pc, #112]	; (8003718 <TIM_OC1_SetConfig+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00f      	beq.n	80036ca <TIM_OC1_SetConfig+0xd2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a1b      	ldr	r2, [pc, #108]	; (800371c <TIM_OC1_SetConfig+0x124>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d00b      	beq.n	80036ca <TIM_OC1_SetConfig+0xd2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <TIM_OC1_SetConfig+0x128>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d007      	beq.n	80036ca <TIM_OC1_SetConfig+0xd2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <TIM_OC1_SetConfig+0x12c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d003      	beq.n	80036ca <TIM_OC1_SetConfig+0xd2>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a18      	ldr	r2, [pc, #96]	; (8003728 <TIM_OC1_SetConfig+0x130>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d111      	bne.n	80036ee <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40013400 	.word	0x40013400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	40015000 	.word	0x40015000

0800372c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f023 0210 	bic.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800375a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800375e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0320 	bic.w	r3, r3, #32
 800377a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a2c      	ldr	r2, [pc, #176]	; (800383c <TIM_OC2_SetConfig+0x110>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_OC2_SetConfig+0x74>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a2b      	ldr	r2, [pc, #172]	; (8003840 <TIM_OC2_SetConfig+0x114>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_OC2_SetConfig+0x74>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <TIM_OC2_SetConfig+0x118>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d10d      	bne.n	80037bc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a1f      	ldr	r2, [pc, #124]	; (800383c <TIM_OC2_SetConfig+0x110>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d013      	beq.n	80037ec <TIM_OC2_SetConfig+0xc0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <TIM_OC2_SetConfig+0x114>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00f      	beq.n	80037ec <TIM_OC2_SetConfig+0xc0>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <TIM_OC2_SetConfig+0x11c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d00b      	beq.n	80037ec <TIM_OC2_SetConfig+0xc0>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	; (800384c <TIM_OC2_SetConfig+0x120>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d007      	beq.n	80037ec <TIM_OC2_SetConfig+0xc0>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a1c      	ldr	r2, [pc, #112]	; (8003850 <TIM_OC2_SetConfig+0x124>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_OC2_SetConfig+0xc0>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <TIM_OC2_SetConfig+0x118>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d113      	bne.n	8003814 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	bf00      	nop
 8003830:	371c      	adds	r7, #28
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40013400 	.word	0x40013400
 8003844:	40015000 	.word	0x40015000
 8003848:	40014000 	.word	0x40014000
 800384c:	40014400 	.word	0x40014400
 8003850:	40014800 	.word	0x40014800

08003854 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003854:	b480      	push	{r7}
 8003856:	b087      	sub	sp, #28
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <TIM_OC3_SetConfig+0x10c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_OC3_SetConfig+0x72>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <TIM_OC3_SetConfig+0x110>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_OC3_SetConfig+0x72>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_OC3_SetConfig+0x114>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d10d      	bne.n	80038e2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	021b      	lsls	r3, r3, #8
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <TIM_OC3_SetConfig+0x10c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <TIM_OC3_SetConfig+0xbe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <TIM_OC3_SetConfig+0x110>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00f      	beq.n	8003912 <TIM_OC3_SetConfig+0xbe>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <TIM_OC3_SetConfig+0x118>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_OC3_SetConfig+0xbe>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <TIM_OC3_SetConfig+0x11c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_OC3_SetConfig+0xbe>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <TIM_OC3_SetConfig+0x120>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_OC3_SetConfig+0xbe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <TIM_OC3_SetConfig+0x114>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d113      	bne.n	800393a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003918:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003920:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	4313      	orrs	r3, r2
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	621a      	str	r2, [r3, #32]
}
 8003954:	bf00      	nop
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40012c00 	.word	0x40012c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40015000 	.word	0x40015000
 800396c:	40014000 	.word	0x40014000
 8003970:	40014400 	.word	0x40014400
 8003974:	40014800 	.word	0x40014800

08003978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	021b      	lsls	r3, r3, #8
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <TIM_OC4_SetConfig+0x110>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_OC4_SetConfig+0x74>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <TIM_OC4_SetConfig+0x114>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC4_SetConfig+0x74>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <TIM_OC4_SetConfig+0x118>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d10d      	bne.n	8003a08 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	031b      	lsls	r3, r3, #12
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a1f      	ldr	r2, [pc, #124]	; (8003a88 <TIM_OC4_SetConfig+0x110>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d013      	beq.n	8003a38 <TIM_OC4_SetConfig+0xc0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <TIM_OC4_SetConfig+0x114>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d00f      	beq.n	8003a38 <TIM_OC4_SetConfig+0xc0>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <TIM_OC4_SetConfig+0x11c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <TIM_OC4_SetConfig+0xc0>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <TIM_OC4_SetConfig+0x120>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d007      	beq.n	8003a38 <TIM_OC4_SetConfig+0xc0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <TIM_OC4_SetConfig+0x124>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_OC4_SetConfig+0xc0>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <TIM_OC4_SetConfig+0x118>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d113      	bne.n	8003a60 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003a46:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	019b      	lsls	r3, r3, #6
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	693a      	ldr	r2, [r7, #16]
 8003a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	621a      	str	r2, [r3, #32]
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40015000 	.word	0x40015000
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800

08003aa0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ae4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <TIM_OC5_SetConfig+0xbc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <TIM_OC5_SetConfig+0x82>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a18      	ldr	r2, [pc, #96]	; (8003b60 <TIM_OC5_SetConfig+0xc0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00f      	beq.n	8003b22 <TIM_OC5_SetConfig+0x82>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <TIM_OC5_SetConfig+0xc4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00b      	beq.n	8003b22 <TIM_OC5_SetConfig+0x82>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <TIM_OC5_SetConfig+0xc8>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d007      	beq.n	8003b22 <TIM_OC5_SetConfig+0x82>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a15      	ldr	r2, [pc, #84]	; (8003b6c <TIM_OC5_SetConfig+0xcc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d003      	beq.n	8003b22 <TIM_OC5_SetConfig+0x82>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <TIM_OC5_SetConfig+0xd0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d109      	bne.n	8003b36 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	621a      	str	r2, [r3, #32]
}
 8003b50:	bf00      	nop
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40013400 	.word	0x40013400
 8003b64:	40014000 	.word	0x40014000
 8003b68:	40014400 	.word	0x40014400
 8003b6c:	40014800 	.word	0x40014800
 8003b70:	40015000 	.word	0x40015000

08003b74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	051b      	lsls	r3, r3, #20
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a1a      	ldr	r2, [pc, #104]	; (8003c34 <TIM_OC6_SetConfig+0xc0>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d013      	beq.n	8003bf8 <TIM_OC6_SetConfig+0x84>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a19      	ldr	r2, [pc, #100]	; (8003c38 <TIM_OC6_SetConfig+0xc4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_OC6_SetConfig+0x84>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a18      	ldr	r2, [pc, #96]	; (8003c3c <TIM_OC6_SetConfig+0xc8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_OC6_SetConfig+0x84>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a17      	ldr	r2, [pc, #92]	; (8003c40 <TIM_OC6_SetConfig+0xcc>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_OC6_SetConfig+0x84>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a16      	ldr	r2, [pc, #88]	; (8003c44 <TIM_OC6_SetConfig+0xd0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC6_SetConfig+0x84>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a15      	ldr	r2, [pc, #84]	; (8003c48 <TIM_OC6_SetConfig+0xd4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d109      	bne.n	8003c0c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	029b      	lsls	r3, r3, #10
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800
 8003c48:	40015000 	.word	0x40015000

08003c4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f023 0201 	bic.w	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 030a 	bic.w	r3, r3, #10
 8003c88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b087      	sub	sp, #28
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	f023 0210 	bic.w	r2, r3, #16
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ce6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	621a      	str	r2, [r3, #32]
}
 8003cfe:	bf00      	nop
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b085      	sub	sp, #20
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f043 0307 	orr.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	609a      	str	r2, [r3, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	021a      	lsls	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	371c      	adds	r7, #28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a1a      	ldr	r2, [r3, #32]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	401a      	ands	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 031f 	and.w	r3, r3, #31
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e074      	b.n	8003ed2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a34      	ldr	r2, [pc, #208]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a33      	ldr	r2, [pc, #204]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d004      	beq.n	8003e26 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a31      	ldr	r2, [pc, #196]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e2c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a21      	ldr	r2, [pc, #132]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d01d      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	; (8003ef0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40015000 	.word	0x40015000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40014000 	.word	0x40014000

08003efc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e078      	b.n	800400a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d11c      	bne.n	8003ff8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	051b      	lsls	r3, r3, #20
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40013400 	.word	0x40013400
 8004020:	40015000 	.word	0x40015000

08004024 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e042      	b.n	80040bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fc ffe9 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2224      	movs	r2, #36	; 0x24
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0201 	bic.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 fb24 	bl	80046bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f825 	bl	80040c4 <UART_SetConfig>
 800407a:	4603      	mov	r3, r0
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e01b      	b.n	80040bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fba3 	bl	8004800 <UART_CheckIdleState>
 80040ba:	4603      	mov	r3, r0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040c8:	b08c      	sub	sp, #48	; 0x30
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	69db      	ldr	r3, [r3, #28]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	4baa      	ldr	r3, [pc, #680]	; (800439c <UART_SetConfig+0x2d8>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040fc:	430b      	orrs	r3, r1
 80040fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a9f      	ldr	r2, [pc, #636]	; (80043a0 <UART_SetConfig+0x2dc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800412c:	4313      	orrs	r3, r2
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800413a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004144:	430b      	orrs	r3, r1
 8004146:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	f023 010f 	bic.w	r1, r3, #15
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a90      	ldr	r2, [pc, #576]	; (80043a4 <UART_SetConfig+0x2e0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d125      	bne.n	80041b4 <UART_SetConfig+0xf0>
 8004168:	4b8f      	ldr	r3, [pc, #572]	; (80043a8 <UART_SetConfig+0x2e4>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f003 0303 	and.w	r3, r3, #3
 8004172:	2b03      	cmp	r3, #3
 8004174:	d81a      	bhi.n	80041ac <UART_SetConfig+0xe8>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0xb8>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	0800418d 	.word	0x0800418d
 8004180:	0800419d 	.word	0x0800419d
 8004184:	08004195 	.word	0x08004195
 8004188:	080041a5 	.word	0x080041a5
 800418c:	2301      	movs	r3, #1
 800418e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004192:	e116      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004194:	2302      	movs	r3, #2
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800419a:	e112      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800419c:	2304      	movs	r3, #4
 800419e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041a2:	e10e      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80041a4:	2308      	movs	r3, #8
 80041a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041aa:	e10a      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80041ac:	2310      	movs	r3, #16
 80041ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80041b2:	e106      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a7c      	ldr	r2, [pc, #496]	; (80043ac <UART_SetConfig+0x2e8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d138      	bne.n	8004230 <UART_SetConfig+0x16c>
 80041be:	4b7a      	ldr	r3, [pc, #488]	; (80043a8 <UART_SetConfig+0x2e4>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f003 030c 	and.w	r3, r3, #12
 80041c8:	2b0c      	cmp	r3, #12
 80041ca:	d82d      	bhi.n	8004228 <UART_SetConfig+0x164>
 80041cc:	a201      	add	r2, pc, #4	; (adr r2, 80041d4 <UART_SetConfig+0x110>)
 80041ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041d2:	bf00      	nop
 80041d4:	08004209 	.word	0x08004209
 80041d8:	08004229 	.word	0x08004229
 80041dc:	08004229 	.word	0x08004229
 80041e0:	08004229 	.word	0x08004229
 80041e4:	08004219 	.word	0x08004219
 80041e8:	08004229 	.word	0x08004229
 80041ec:	08004229 	.word	0x08004229
 80041f0:	08004229 	.word	0x08004229
 80041f4:	08004211 	.word	0x08004211
 80041f8:	08004229 	.word	0x08004229
 80041fc:	08004229 	.word	0x08004229
 8004200:	08004229 	.word	0x08004229
 8004204:	08004221 	.word	0x08004221
 8004208:	2300      	movs	r3, #0
 800420a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800420e:	e0d8      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004210:	2302      	movs	r3, #2
 8004212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004216:	e0d4      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800421e:	e0d0      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004226:	e0cc      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800422e:	e0c8      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a5e      	ldr	r2, [pc, #376]	; (80043b0 <UART_SetConfig+0x2ec>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d125      	bne.n	8004286 <UART_SetConfig+0x1c2>
 800423a:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <UART_SetConfig+0x2e4>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004244:	2b30      	cmp	r3, #48	; 0x30
 8004246:	d016      	beq.n	8004276 <UART_SetConfig+0x1b2>
 8004248:	2b30      	cmp	r3, #48	; 0x30
 800424a:	d818      	bhi.n	800427e <UART_SetConfig+0x1ba>
 800424c:	2b20      	cmp	r3, #32
 800424e:	d00a      	beq.n	8004266 <UART_SetConfig+0x1a2>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d814      	bhi.n	800427e <UART_SetConfig+0x1ba>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <UART_SetConfig+0x19a>
 8004258:	2b10      	cmp	r3, #16
 800425a:	d008      	beq.n	800426e <UART_SetConfig+0x1aa>
 800425c:	e00f      	b.n	800427e <UART_SetConfig+0x1ba>
 800425e:	2300      	movs	r3, #0
 8004260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004264:	e0ad      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004266:	2302      	movs	r3, #2
 8004268:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800426c:	e0a9      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800426e:	2304      	movs	r3, #4
 8004270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004274:	e0a5      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004276:	2308      	movs	r3, #8
 8004278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800427c:	e0a1      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800427e:	2310      	movs	r3, #16
 8004280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004284:	e09d      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a4a      	ldr	r2, [pc, #296]	; (80043b4 <UART_SetConfig+0x2f0>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d125      	bne.n	80042dc <UART_SetConfig+0x218>
 8004290:	4b45      	ldr	r3, [pc, #276]	; (80043a8 <UART_SetConfig+0x2e4>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800429a:	2bc0      	cmp	r3, #192	; 0xc0
 800429c:	d016      	beq.n	80042cc <UART_SetConfig+0x208>
 800429e:	2bc0      	cmp	r3, #192	; 0xc0
 80042a0:	d818      	bhi.n	80042d4 <UART_SetConfig+0x210>
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d00a      	beq.n	80042bc <UART_SetConfig+0x1f8>
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d814      	bhi.n	80042d4 <UART_SetConfig+0x210>
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <UART_SetConfig+0x1f0>
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d008      	beq.n	80042c4 <UART_SetConfig+0x200>
 80042b2:	e00f      	b.n	80042d4 <UART_SetConfig+0x210>
 80042b4:	2300      	movs	r3, #0
 80042b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ba:	e082      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80042bc:	2302      	movs	r3, #2
 80042be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042c2:	e07e      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80042c4:	2304      	movs	r3, #4
 80042c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042ca:	e07a      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80042cc:	2308      	movs	r3, #8
 80042ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042d2:	e076      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80042d4:	2310      	movs	r3, #16
 80042d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80042da:	e072      	b.n	80043c2 <UART_SetConfig+0x2fe>
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a35      	ldr	r2, [pc, #212]	; (80043b8 <UART_SetConfig+0x2f4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d12a      	bne.n	800433c <UART_SetConfig+0x278>
 80042e6:	4b30      	ldr	r3, [pc, #192]	; (80043a8 <UART_SetConfig+0x2e4>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042f4:	d01a      	beq.n	800432c <UART_SetConfig+0x268>
 80042f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fa:	d81b      	bhi.n	8004334 <UART_SetConfig+0x270>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004300:	d00c      	beq.n	800431c <UART_SetConfig+0x258>
 8004302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004306:	d815      	bhi.n	8004334 <UART_SetConfig+0x270>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <UART_SetConfig+0x250>
 800430c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004310:	d008      	beq.n	8004324 <UART_SetConfig+0x260>
 8004312:	e00f      	b.n	8004334 <UART_SetConfig+0x270>
 8004314:	2300      	movs	r3, #0
 8004316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800431a:	e052      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800431c:	2302      	movs	r3, #2
 800431e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004322:	e04e      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004324:	2304      	movs	r3, #4
 8004326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800432a:	e04a      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800432c:	2308      	movs	r3, #8
 800432e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004332:	e046      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004334:	2310      	movs	r3, #16
 8004336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433a:	e042      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <UART_SetConfig+0x2dc>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d13a      	bne.n	80043bc <UART_SetConfig+0x2f8>
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <UART_SetConfig+0x2e4>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004350:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004354:	d01a      	beq.n	800438c <UART_SetConfig+0x2c8>
 8004356:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800435a:	d81b      	bhi.n	8004394 <UART_SetConfig+0x2d0>
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004360:	d00c      	beq.n	800437c <UART_SetConfig+0x2b8>
 8004362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004366:	d815      	bhi.n	8004394 <UART_SetConfig+0x2d0>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <UART_SetConfig+0x2b0>
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d008      	beq.n	8004384 <UART_SetConfig+0x2c0>
 8004372:	e00f      	b.n	8004394 <UART_SetConfig+0x2d0>
 8004374:	2300      	movs	r3, #0
 8004376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800437a:	e022      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800437c:	2302      	movs	r3, #2
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004382:	e01e      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004384:	2304      	movs	r3, #4
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438a:	e01a      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800438c:	2308      	movs	r3, #8
 800438e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004392:	e016      	b.n	80043c2 <UART_SetConfig+0x2fe>
 8004394:	2310      	movs	r3, #16
 8004396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800439a:	e012      	b.n	80043c2 <UART_SetConfig+0x2fe>
 800439c:	cfff69f3 	.word	0xcfff69f3
 80043a0:	40008000 	.word	0x40008000
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40004800 	.word	0x40004800
 80043b4:	40004c00 	.word	0x40004c00
 80043b8:	40005000 	.word	0x40005000
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4aae      	ldr	r2, [pc, #696]	; (8004680 <UART_SetConfig+0x5bc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	f040 8097 	bne.w	80044fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d823      	bhi.n	800441e <UART_SetConfig+0x35a>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x318>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004401 	.word	0x08004401
 80043e0:	0800441f 	.word	0x0800441f
 80043e4:	08004409 	.word	0x08004409
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	0800440f 	.word	0x0800440f
 80043f0:	0800441f 	.word	0x0800441f
 80043f4:	0800441f 	.word	0x0800441f
 80043f8:	0800441f 	.word	0x0800441f
 80043fc:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fe f920 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 8004404:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004406:	e010      	b.n	800442a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b9e      	ldr	r3, [pc, #632]	; (8004684 <UART_SetConfig+0x5c0>)
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800440c:	e00d      	b.n	800442a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7fe f8ab 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8004412:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004414:	e009      	b.n	800442a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800441c:	e005      	b.n	800442a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800442a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8130 	beq.w	8004692 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	4a94      	ldr	r2, [pc, #592]	; (8004688 <UART_SetConfig+0x5c4>)
 8004438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800443c:	461a      	mov	r2, r3
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	fbb3 f3f2 	udiv	r3, r3, r2
 8004444:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4413      	add	r3, r2
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	429a      	cmp	r2, r3
 8004454:	d305      	bcc.n	8004462 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	429a      	cmp	r2, r3
 8004460:	d903      	bls.n	800446a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004468:	e113      	b.n	8004692 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	2200      	movs	r2, #0
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	60fa      	str	r2, [r7, #12]
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004476:	4a84      	ldr	r2, [pc, #528]	; (8004688 <UART_SetConfig+0x5c4>)
 8004478:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800447c:	b29b      	uxth	r3, r3
 800447e:	2200      	movs	r2, #0
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	607a      	str	r2, [r7, #4]
 8004484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800448c:	f7fb fec4 	bl	8000218 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4610      	mov	r0, r2
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	020b      	lsls	r3, r1, #8
 80044a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044a6:	0202      	lsls	r2, r0, #8
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	6849      	ldr	r1, [r1, #4]
 80044ac:	0849      	lsrs	r1, r1, #1
 80044ae:	2000      	movs	r0, #0
 80044b0:	460c      	mov	r4, r1
 80044b2:	4605      	mov	r5, r0
 80044b4:	eb12 0804 	adds.w	r8, r2, r4
 80044b8:	eb43 0905 	adc.w	r9, r3, r5
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	469a      	mov	sl, r3
 80044c4:	4693      	mov	fp, r2
 80044c6:	4652      	mov	r2, sl
 80044c8:	465b      	mov	r3, fp
 80044ca:	4640      	mov	r0, r8
 80044cc:	4649      	mov	r1, r9
 80044ce:	f7fb fea3 	bl	8000218 <__aeabi_uldivmod>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4613      	mov	r3, r2
 80044d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e0:	d308      	bcc.n	80044f4 <UART_SetConfig+0x430>
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044e8:	d204      	bcs.n	80044f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	e0ce      	b.n	8004692 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044fa:	e0ca      	b.n	8004692 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004504:	d166      	bne.n	80045d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800450a:	2b08      	cmp	r3, #8
 800450c:	d827      	bhi.n	800455e <UART_SetConfig+0x49a>
 800450e:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <UART_SetConfig+0x450>)
 8004510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004514:	08004539 	.word	0x08004539
 8004518:	08004541 	.word	0x08004541
 800451c:	08004549 	.word	0x08004549
 8004520:	0800455f 	.word	0x0800455f
 8004524:	0800454f 	.word	0x0800454f
 8004528:	0800455f 	.word	0x0800455f
 800452c:	0800455f 	.word	0x0800455f
 8004530:	0800455f 	.word	0x0800455f
 8004534:	08004557 	.word	0x08004557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004538:	f7fe f884 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800453c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800453e:	e014      	b.n	800456a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004540:	f7fe f896 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8004544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004546:	e010      	b.n	800456a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004548:	4b4e      	ldr	r3, [pc, #312]	; (8004684 <UART_SetConfig+0x5c0>)
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800454c:	e00d      	b.n	800456a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800454e:	f7fe f80b 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004554:	e009      	b.n	800456a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800455c:	e005      	b.n	800456a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8090 	beq.w	8004692 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	4a44      	ldr	r2, [pc, #272]	; (8004688 <UART_SetConfig+0x5c4>)
 8004578:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800457c:	461a      	mov	r2, r3
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	fbb3 f3f2 	udiv	r3, r3, r2
 8004584:	005a      	lsls	r2, r3, #1
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	085b      	lsrs	r3, r3, #1
 800458c:	441a      	add	r2, r3
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004598:	6a3b      	ldr	r3, [r7, #32]
 800459a:	2b0f      	cmp	r3, #15
 800459c:	d916      	bls.n	80045cc <UART_SetConfig+0x508>
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d212      	bcs.n	80045cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f023 030f 	bic.w	r3, r3, #15
 80045ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	085b      	lsrs	r3, r3, #1
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	8bfb      	ldrh	r3, [r7, #30]
 80045be:	4313      	orrs	r3, r2
 80045c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	8bfa      	ldrh	r2, [r7, #30]
 80045c8:	60da      	str	r2, [r3, #12]
 80045ca:	e062      	b.n	8004692 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045d2:	e05e      	b.n	8004692 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d828      	bhi.n	800462e <UART_SetConfig+0x56a>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <UART_SetConfig+0x520>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004609 	.word	0x08004609
 80045e8:	08004611 	.word	0x08004611
 80045ec:	08004619 	.word	0x08004619
 80045f0:	0800462f 	.word	0x0800462f
 80045f4:	0800461f 	.word	0x0800461f
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	0800462f 	.word	0x0800462f
 8004600:	0800462f 	.word	0x0800462f
 8004604:	08004627 	.word	0x08004627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7fe f81c 	bl	8002644 <HAL_RCC_GetPCLK1Freq>
 800460c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800460e:	e014      	b.n	800463a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004610:	f7fe f82e 	bl	8002670 <HAL_RCC_GetPCLK2Freq>
 8004614:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004616:	e010      	b.n	800463a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <UART_SetConfig+0x5c0>)
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800461c:	e00d      	b.n	800463a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461e:	f7fd ffa3 	bl	8002568 <HAL_RCC_GetSysClockFreq>
 8004622:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004624:	e009      	b.n	800463a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800462a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800462c:	e005      	b.n	800463a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004638:	bf00      	nop
    }

    if (pclk != 0U)
 800463a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	d028      	beq.n	8004692 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	4a10      	ldr	r2, [pc, #64]	; (8004688 <UART_SetConfig+0x5c4>)
 8004646:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800464a:	461a      	mov	r2, r3
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	441a      	add	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004662:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	2b0f      	cmp	r3, #15
 8004668:	d910      	bls.n	800468c <UART_SetConfig+0x5c8>
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004670:	d20c      	bcs.n	800468c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	b29a      	uxth	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	e009      	b.n	8004692 <UART_SetConfig+0x5ce>
 800467e:	bf00      	nop
 8004680:	40008000 	.word	0x40008000
 8004684:	00f42400 	.word	0x00f42400
 8004688:	08004d88 	.word	0x08004d88
      }
      else
      {
        ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2201      	movs	r2, #1
 8004696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2201      	movs	r2, #1
 800469e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2200      	movs	r2, #0
 80046a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	2200      	movs	r2, #0
 80046ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80046ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3730      	adds	r7, #48	; 0x30
 80046b6:	46bd      	mov	sp, r7
 80046b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ba:	d10a      	bne.n	80047d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b098      	sub	sp, #96	; 0x60
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004810:	f7fc fd9e 	bl	8001350 <HAL_GetTick>
 8004814:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d12f      	bne.n	8004884 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f88e 	bl	8004954 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d022      	beq.n	8004884 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004852:	653b      	str	r3, [r7, #80]	; 0x50
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	647b      	str	r3, [r7, #68]	; 0x44
 800485e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800486a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e063      	b.n	800494c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0304 	and.w	r3, r3, #4
 800488e:	2b04      	cmp	r3, #4
 8004890:	d149      	bne.n	8004926 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004892:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489a:	2200      	movs	r2, #0
 800489c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f857 	bl	8004954 <UART_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03c      	beq.n	8004926 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	623b      	str	r3, [r7, #32]
   return(result);
 80048ba:	6a3b      	ldr	r3, [r7, #32]
 80048bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	461a      	mov	r2, r3
 80048c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ca:	633b      	str	r3, [r7, #48]	; 0x30
 80048cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e6      	bne.n	80048ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3308      	adds	r3, #8
 80048e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048fe:	61fa      	str	r2, [r7, #28]
 8004900:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	69b9      	ldr	r1, [r7, #24]
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	617b      	str	r3, [r7, #20]
   return(result);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2220      	movs	r2, #32
 8004916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e012      	b.n	800494c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2220      	movs	r2, #32
 8004932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3758      	adds	r7, #88	; 0x58
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	4613      	mov	r3, r2
 8004962:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004964:	e04f      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d04b      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496e:	f7fc fcef 	bl	8001350 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	429a      	cmp	r2, r3
 800497c:	d302      	bcc.n	8004984 <UART_WaitOnFlagUntilTimeout+0x30>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e04e      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d037      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b80      	cmp	r3, #128	; 0x80
 800499a:	d034      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb2>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d031      	beq.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f003 0308 	and.w	r3, r3, #8
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d110      	bne.n	80049d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2208      	movs	r2, #8
 80049b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f838 	bl	8004a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2208      	movs	r2, #8
 80049c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e029      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e0:	d111      	bne.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f81e 	bl	8004a2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e00f      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69da      	ldr	r2, [r3, #28]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4013      	ands	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	79fb      	ldrb	r3, [r7, #7]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d0a0      	beq.n	8004966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b095      	sub	sp, #84	; 0x54
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	643b      	str	r3, [r7, #64]	; 0x40
 8004a56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e6      	bne.n	8004a36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	e853 3f00 	ldrex	r3, [r3]
 8004a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	f023 0301 	bic.w	r3, r3, #1
 8004a82:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a94:	e841 2300 	strex	r3, r2, [r1]
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1e3      	bne.n	8004a68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d118      	bne.n	8004ada <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0310 	bic.w	r3, r3, #16
 8004abc:	647b      	str	r3, [r7, #68]	; 0x44
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac6:	61bb      	str	r3, [r7, #24]
 8004ac8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e6      	bne.n	8004aa8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004aee:	bf00      	nop
 8004af0:	3754      	adds	r7, #84	; 0x54
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_UARTEx_DisableFifoMode+0x16>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e027      	b.n	8004b60 <HAL_UARTEx_DisableFifoMode+0x66>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	; 0x24
 8004b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b3e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e02d      	b.n	8004be0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	; 0x24
 8004b90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 f84f 	bl	8004c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d101      	bne.n	8004c00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	e02d      	b.n	8004c5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2224      	movs	r2, #36	; 0x24
 8004c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0201 	bic.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f811 	bl	8004c64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2220      	movs	r2, #32
 8004c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c84:	e031      	b.n	8004cea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c86:	2308      	movs	r3, #8
 8004c88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	0e5b      	lsrs	r3, r3, #25
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	0f5b      	lsrs	r3, r3, #29
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cae:	7bbb      	ldrb	r3, [r7, #14]
 8004cb0:	7b3a      	ldrb	r2, [r7, #12]
 8004cb2:	4911      	ldr	r1, [pc, #68]	; (8004cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8004cb4:	5c8a      	ldrb	r2, [r1, r2]
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004cba:	7b3a      	ldrb	r2, [r7, #12]
 8004cbc:	490f      	ldr	r1, [pc, #60]	; (8004cfc <UARTEx_SetNbDataToProcess+0x98>)
 8004cbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004cc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	7b7a      	ldrb	r2, [r7, #13]
 8004cd0:	4909      	ldr	r1, [pc, #36]	; (8004cf8 <UARTEx_SetNbDataToProcess+0x94>)
 8004cd2:	5c8a      	ldrb	r2, [r1, r2]
 8004cd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cd8:	7b7a      	ldrb	r2, [r7, #13]
 8004cda:	4908      	ldr	r1, [pc, #32]	; (8004cfc <UARTEx_SetNbDataToProcess+0x98>)
 8004cdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cde:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	08004da0 	.word	0x08004da0
 8004cfc:	08004da8 	.word	0x08004da8

08004d00 <__libc_init_array>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4d0d      	ldr	r5, [pc, #52]	; (8004d38 <__libc_init_array+0x38>)
 8004d04:	4c0d      	ldr	r4, [pc, #52]	; (8004d3c <__libc_init_array+0x3c>)
 8004d06:	1b64      	subs	r4, r4, r5
 8004d08:	10a4      	asrs	r4, r4, #2
 8004d0a:	2600      	movs	r6, #0
 8004d0c:	42a6      	cmp	r6, r4
 8004d0e:	d109      	bne.n	8004d24 <__libc_init_array+0x24>
 8004d10:	4d0b      	ldr	r5, [pc, #44]	; (8004d40 <__libc_init_array+0x40>)
 8004d12:	4c0c      	ldr	r4, [pc, #48]	; (8004d44 <__libc_init_array+0x44>)
 8004d14:	f000 f820 	bl	8004d58 <_init>
 8004d18:	1b64      	subs	r4, r4, r5
 8004d1a:	10a4      	asrs	r4, r4, #2
 8004d1c:	2600      	movs	r6, #0
 8004d1e:	42a6      	cmp	r6, r4
 8004d20:	d105      	bne.n	8004d2e <__libc_init_array+0x2e>
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d28:	4798      	blx	r3
 8004d2a:	3601      	adds	r6, #1
 8004d2c:	e7ee      	b.n	8004d0c <__libc_init_array+0xc>
 8004d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d32:	4798      	blx	r3
 8004d34:	3601      	adds	r6, #1
 8004d36:	e7f2      	b.n	8004d1e <__libc_init_array+0x1e>
 8004d38:	08004db8 	.word	0x08004db8
 8004d3c:	08004db8 	.word	0x08004db8
 8004d40:	08004db8 	.word	0x08004db8
 8004d44:	08004dbc 	.word	0x08004dbc

08004d48 <memset>:
 8004d48:	4402      	add	r2, r0
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d100      	bne.n	8004d52 <memset+0xa>
 8004d50:	4770      	bx	lr
 8004d52:	f803 1b01 	strb.w	r1, [r3], #1
 8004d56:	e7f9      	b.n	8004d4c <memset+0x4>

08004d58 <_init>:
 8004d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5a:	bf00      	nop
 8004d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d5e:	bc08      	pop	{r3}
 8004d60:	469e      	mov	lr, r3
 8004d62:	4770      	bx	lr

08004d64 <_fini>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr
